// Package myuplink provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package myuplink

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	Client_CredentialsScopes        = "Client_Credentials.Scopes"
	Client_Credentials_AD_B2CScopes = "Client_Credentials_AD_B2C.Scopes"
)

// Defines values for AidMode.
const (
	N0 AidMode = 0
	N1 AidMode = 1
)

// Defines values for DeviceConnectionState.
const (
	Connected    DeviceConnectionState = "Connected"
	Disconnected DeviceConnectionState = "Disconnected"
)

// Defines values for PremiumFeatures.
const (
	History      PremiumFeatures = "history"
	Manage       PremiumFeatures = "manage"
	Organization PremiumFeatures = "organization"
)

// Defines values for SecurityLevel.
const (
	Admin   SecurityLevel = "admin"
	Manager SecurityLevel = "manager"
	Viewer  SecurityLevel = "viewer"
)

// Defines values for SmartMode.
const (
	Away     SmartMode = "Away"
	Default  SmartMode = "Default"
	Home     SmartMode = "Home"
	Normal   SmartMode = "Normal"
	Vacation SmartMode = "Vacation"
)

// Defines values for Status.
const (
	Active               Status = "Active"
	DismissedByDevice    Status = "DismissedByDevice"
	None                 Status = "None"
	ResetByUserFromCloud Status = "ResetByUserFromCloud"
	ResetByUserOnDevice  Status = "ResetByUserOnDevice"
	Unknown              Status = "Unknown"
)

// AidMode defines model for AidMode.
type AidMode int32

// AidModeResponseModel defines model for AidModeResponseModel.
type AidModeResponseModel struct {
	AidMode *AidMode `json:"aidMode,omitempty"`
}

// Alarm Alarm.
type Alarm struct {
	// AlarmNumber The companyÂ´s id of the alarm.
	AlarmNumber *int32 `json:"alarmNumber,omitempty"`

	// CreatedDatetime Date of the creation.
	CreatedDatetime *string `json:"createdDatetime"`

	// Description Localized alarm description.
	Description *string `json:"description"`

	// DeviceId The device which the alarm belongs to.
	DeviceId *string `json:"deviceId"`

	// EquipName The name of the equipment.
	EquipName *string `json:"equipName"`

	// Header Localized alarm title.
	Header *string `json:"header"`

	// Id The id of the alarm stored in the database.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Severity Determines the severity of the alarm,
	// 1 being the most severe.
	Severity *int32  `json:"severity,omitempty"`
	Status   *Status `json:"status,omitempty"`

	// StatusHistory Status history.
	StatusHistory *[]AlarmStatus `json:"statusHistory"`
}

// AlarmStatus defines model for AlarmStatus.
type AlarmStatus struct {
	// Datetime Date of the alarm.
	Datetime *int32  `json:"datetime,omitempty"`
	Status   *Status `json:"status,omitempty"`
}

// AlarmsPaged Alarms paged.
type AlarmsPaged struct {
	// ItemsPerPage Items per page.
	ItemsPerPage *int32 `json:"itemsPerPage,omitempty"`

	// Notifications Notifications.
	Notifications *[]Alarm `json:"notifications"`

	// NumItems Num items.
	NumItems *int32 `json:"numItems,omitempty"`

	// Page Page.
	Page *int32 `json:"page,omitempty"`
}

// AvailableMethods defines model for AvailableMethods.
type AvailableMethods struct {
	BoostHotWater       *bool `json:"boostHotWater,omitempty"`
	BoostVentilation    *bool `json:"boostVentilation,omitempty"`
	ForceUpdate         *bool `json:"forceUpdate,omitempty"`
	Forcesync           *bool `json:"forcesync,omitempty"`
	GetGuideQuestion    *bool `json:"getGuideQuestion,omitempty"`
	GetMenu             *bool `json:"getMenu,omitempty"`
	GetMenuChain        *bool `json:"getMenuChain,omitempty"`
	GetScheduleConfig   *bool `json:"getScheduleConfig,omitempty"`
	GetScheduleModes    *bool `json:"getScheduleModes,omitempty"`
	GetScheduleVacation *bool `json:"getScheduleVacation,omitempty"`
	GetScheduleWeekly   *bool `json:"getScheduleWeekly,omitempty"`
	GetZones            *bool `json:"getZones,omitempty"`
	ProcessIntent       *bool `json:"processIntent,omitempty"`
	Reboot              *bool `json:"reboot,omitempty"`
	RequestUpdate       *bool `json:"requestUpdate,omitempty"`
	ResetAlarm          *bool `json:"resetAlarm,omitempty"`
	SendHaystack        *bool `json:"sendHaystack,omitempty"`
	SetAidMode          *bool `json:"setAidMode,omitempty"`
	SetScheduleModes    *bool `json:"setScheduleModes,omitempty"`
	SetScheduleOverride *bool `json:"setScheduleOverride,omitempty"`
	SetScheduleVacation *bool `json:"setScheduleVacation,omitempty"`
	SetScheduleWeekly   *bool `json:"setScheduleWeekly,omitempty"`
	SetSmartMode        *bool `json:"setSmartMode,omitempty"`
	SetVentilationMode  *bool `json:"setVentilationMode,omitempty"`
	Settings            *bool `json:"settings,omitempty"`
	TriggerEvent        *bool `json:"triggerEvent,omitempty"`
}

// CloudToDeviceMethodResult Represents the Device Method Invocation Results.
type CloudToDeviceMethodResult struct {
	Payload *interface{} `json:"payload,omitempty"`

	// Status Gets or sets the status of device method invocation.
	Status *int32 `json:"status,omitempty"`
}

// DeviceConnectionState Specifies the different connection states of a device.
// 0 - Disconnected
// 1 - Connected
type DeviceConnectionState string

// DeviceFirmwareInfoResponse defines model for DeviceFirmwareInfoResponse.
type DeviceFirmwareInfoResponse struct {
	CurrentFwVersion *string `json:"currentFwVersion"`
	DesiredFwVersion *string `json:"desiredFwVersion"`
	DeviceId         *string `json:"deviceId"`
	FirmwareId       *string `json:"firmwareId"`
	PendingFwVersion *string `json:"pendingFwVersion"`
}

// DevicePremiumResponse defines model for DevicePremiumResponse.
type DevicePremiumResponse struct {
	Subscriptions *[]PremiumFeatureResponseModel `json:"subscriptions"`
}

// DeviceResponseModel DeviceResponseModel.
type DeviceResponseModel struct {
	AvailableFeatures *AvailableMethods `json:"availableFeatures,omitempty"`

	// ConnectionState Specifies the different connection states of a device.
	// 0 - Disconnected
	// 1 - Connected
	ConnectionState *DeviceConnectionState `json:"connectionState,omitempty"`

	// Firmware Firmware response model
	Firmware *FirmwareResponseModel `json:"firmware,omitempty"`

	// Id Id.
	Id *string `json:"id"`

	// Product ProductResponseModel
	Product *ProductResponseModel `json:"product,omitempty"`
}

// EnumValues defines model for EnumValues.
type EnumValues struct {
	// Icon The EnumIcon of the Enum.
	Icon *string `json:"icon"`

	// Text The EnumText of the Enum.
	Text *string `json:"text"`

	// Value The EnumValue of the Enum.
	Value *string `json:"value"`
}

// FirmwareResponseModel Firmware response model
type FirmwareResponseModel struct {
	// CurrentFwVersion Current Firmware Version
	CurrentFwVersion *string `json:"currentFwVersion"`

	// DesiredFwVersion Desired Firmware Version
	DesiredFwVersion *string `json:"desiredFwVersion"`
}

// PagedSystemResult Group list.
type PagedSystemResult struct {
	// ItemsPerPage Connection state.
	ItemsPerPage *int32 `json:"itemsPerPage,omitempty"`

	// NumItems Firmware.
	NumItems *int32 `json:"numItems,omitempty"`

	// Page Id.
	Page *int32 `json:"page,omitempty"`

	// Systems Groups.
	Systems *[]SystemWithDevices `json:"systems"`
}

// ParameterData Grouped parameter value.
type ParameterData struct {
	// Category Category.
	Category *string `json:"category"`

	// EnumValues Parameter enum values.
	EnumValues *[]EnumValues `json:"enumValues"`

	// MaxValue Parameter max value.
	MaxValue *float64 `json:"maxValue"`

	// MinValue Parameter min value.
	MinValue *float64 `json:"minValue"`

	// ParameterId Parameter id.
	ParameterId *string `json:"parameterId"`

	// ParameterName Parameter name.
	ParameterName *string `json:"parameterName"`

	// ParameterUnit Parameter unit.
	ParameterUnit *string `json:"parameterUnit"`

	// ScaleValue Parameter scale value.
	ScaleValue *string `json:"scaleValue"`

	// SmartHomeCategories Parameter Smart home categories.
	SmartHomeCategories *[]string `json:"smartHomeCategories"`

	// StepValue Parameter step value, specifies the allowed stepping between valid values
	// when the value is numeric.
	StepValue *float64 `json:"stepValue"`

	// StrVal String value property.
	StrVal *string `json:"strVal"`

	// Timestamp Timestamp property.
	Timestamp *time.Time `json:"timestamp,omitempty"`

	// Value Value property.
	Value *float64 `json:"value"`

	// Writable Defines if parameter could be changed.
	Writable *bool `json:"writable,omitempty"`

	// ZoneId Reference to a ShZone entity.
	ZoneId *string `json:"zoneId"`
}

// PremiumFeatureResponseModel defines model for PremiumFeatureResponseModel.
type PremiumFeatureResponseModel struct {
	// Type Premium features enum.
	Type       *PremiumFeatures `json:"type,omitempty"`
	ValidUntil *time.Time       `json:"validUntil"`
}

// PremiumFeatures Premium features enum.
type PremiumFeatures string

// Product Product model.
type Product struct {
	// Name Name.
	Name *string `json:"name"`

	// SerialNumber Serial number.
	SerialNumber *string `json:"serialNumber"`
}

// ProductResponseModel ProductResponseModel
type ProductResponseModel struct {
	// Name Name
	Name *string `json:"name"`

	// SerialNumber SerialNumber
	SerialNumber *string `json:"serialNumber"`
}

// SecurityLevel defines model for SecurityLevel.
type SecurityLevel string

// SmartHomeModeModel defines model for SmartHomeModeModel.
type SmartHomeModeModel struct {
	// SmartHomeMode Smart mode enum.
	SmartHomeMode *SmartMode `json:"smartHomeMode,omitempty"`
}

// SmartMode Smart mode enum.
type SmartMode string

// Status defines model for Status.
type Status string

// SystemDevice Device model.
type SystemDevice struct {
	// ConnectionState Specifies the different connection states of a device.
	// 0 - Disconnected
	// 1 - Connected
	ConnectionState *DeviceConnectionState `json:"connectionState,omitempty"`

	// CurrentFwVersion Current firmware version.
	CurrentFwVersion *string `json:"currentFwVersion"`

	// Id Id.
	Id *string `json:"id"`

	// Product Product model.
	Product *Product `json:"product,omitempty"`
}

// SystemWithDevices Group.
type SystemWithDevices struct {
	// Country System country.
	Country *string `json:"country"`

	// Devices List of devices.
	Devices *[]SystemDevice `json:"devices"`

	// HasAlarm Whether system currently has an active alarm.
	HasAlarm *bool `json:"hasAlarm,omitempty"`

	// Name System name.
	Name          *string        `json:"name"`
	SecurityLevel *SecurityLevel `json:"securityLevel,omitempty"`

	// SystemId System identifier.
	SystemId *openapi_types.UUID `json:"systemId,omitempty"`
}

// ZonePatchRequest defines model for ZonePatchRequest.
type ZonePatchRequest struct {
	Mode         *string  `json:"mode"`
	SetpointCool *float64 `json:"setpointCool"`
	SetpointHeat *float64 `json:"setpointHeat"`
}

// ZoneResponse defines model for ZoneResponse.
type ZoneResponse struct {
	// CommandOnly If true, zone is command-only and no temperature readings
	// are available. Setpoint will be an unspecified value
	// (not degrees).
	CommandOnly *bool `json:"commandOnly,omitempty"`

	// IndoorCo2 Indoor CO2 levels (0-40000ppm)
	IndoorCo2 *int32 `json:"indoorCo2"`

	// IndoorHumidity Indoor humidity (0-100%RH)
	IndoorHumidity *float64 `json:"indoorHumidity"`

	// IsCelsius Specified temperature unit in haystack.
	// If "isCelsius" is false then all temperatures are in Fahrenheit. Otherwies it is in Celsius.
	IsCelsius *bool `json:"isCelsius,omitempty"`

	// Mode Sh-zone's current mode.
	Mode *string `json:"mode"`

	// Name sh-zone's parameter name.
	Name *string `json:"name"`

	// Setpoint Target temperature in target unit.
	Setpoint *float64 `json:"setpoint"`

	// SetpointCool Cooling setpoint current value.
	SetpointCool *float64 `json:"setpointCool"`

	// SetpointHeat Heating setpoint current value.
	SetpointHeat *float64 `json:"setpointHeat"`

	// SetpointRangeMax Maximum temperature range.
	SetpointRangeMax *int32 `json:"setpointRangeMax"`

	// SetpointRangeMin Minimum temperature range.
	SetpointRangeMin *int32 `json:"setpointRangeMin"`

	// SupportedModes sh-zone's supported modes.
	SupportedModes *string `json:"supportedModes"`

	// Temperature Current temperature in target unit.
	Temperature *float64 `json:"temperature"`

	// ZoneId sh-zone's parameter id.
	ZoneId *string `json:"zoneId"`
}

// GetV2DevicesDeviceIdPointsParams defines parameters for GetV2DevicesDeviceIdPoints.
type GetV2DevicesDeviceIdPointsParams struct {
	// Parameters Parameter ids separated by comma. Optional parameter:
	// If Parameter Ids are not defined, then all device's parameters will be listed.
	Parameters *string `form:"parameters,omitempty" json:"parameters,omitempty"`

	// AcceptLanguage Language (e.g. en-GB).
	AcceptLanguage *string `json:"Accept-Language,omitempty"`
}

// PatchV2DevicesDeviceIdPointsApplicationWildcardPlusJSONBody defines parameters for PatchV2DevicesDeviceIdPoints.
type PatchV2DevicesDeviceIdPointsApplicationWildcardPlusJSONBody map[string]string

// PatchV2DevicesDeviceIdPointsJSONBody defines parameters for PatchV2DevicesDeviceIdPoints.
type PatchV2DevicesDeviceIdPointsJSONBody map[string]string

// PatchV2DevicesDeviceIdPointsApplicationJSONPatchPlusJSONBody defines parameters for PatchV2DevicesDeviceIdPoints.
type PatchV2DevicesDeviceIdPointsApplicationJSONPatchPlusJSONBody map[string]string

// GetV2DevicesDeviceIdSmartHomeZonesParams defines parameters for GetV2DevicesDeviceIdSmartHomeZones.
type GetV2DevicesDeviceIdSmartHomeZonesParams struct {
	// AcceptLanguage Language (e.g. en-GB).
	AcceptLanguage *string `json:"Accept-Language,omitempty"`
}

// GetV2SystemsMeParams defines parameters for GetV2SystemsMe.
type GetV2SystemsMeParams struct {
	// Page Page.
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// ItemsPerPage Items per page.
	ItemsPerPage *int32 `form:"itemsPerPage,omitempty" json:"itemsPerPage,omitempty"`
}

// GetV2SystemsSystemIdNotificationsParams defines parameters for GetV2SystemsSystemIdNotifications.
type GetV2SystemsSystemIdNotificationsParams struct {
	// Page Page number. Optional, defaults to 1.
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// ItemsPerPage Maximum number of results to be returned. Optional, defaults to 10.
	ItemsPerPage *int32 `form:"itemsPerPage,omitempty" json:"itemsPerPage,omitempty"`

	// AcceptLanguage Language (e.g. en-GB).
	AcceptLanguage *string `json:"Accept-Language,omitempty"`
}

// GetV2SystemsSystemIdNotificationsActiveParams defines parameters for GetV2SystemsSystemIdNotificationsActive.
type GetV2SystemsSystemIdNotificationsActiveParams struct {
	// Page Page number. Optional, defaults to 1.
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// ItemsPerPage Maximum number of results to be returned. Optional, defaults to 10.
	ItemsPerPage *int32 `form:"itemsPerPage,omitempty" json:"itemsPerPage,omitempty"`

	// AcceptLanguage Language (e.g. en-GB).
	AcceptLanguage *string `json:"Accept-Language,omitempty"`
}

// GetV3DevicesDeviceIdPointsParams defines parameters for GetV3DevicesDeviceIdPoints.
type GetV3DevicesDeviceIdPointsParams struct {
	// Parameters Parameter ids separated by comma. Optional parameter:
	// If parameter ids are not defined, then all device's parameters will be listed.
	Parameters *string `form:"parameters,omitempty" json:"parameters,omitempty"`

	// AcceptLanguage Language (e.g. en-GB).
	AcceptLanguage *string `json:"Accept-Language,omitempty"`
}

// PatchV2DevicesDeviceIdPointsApplicationWildcardPlusJSONRequestBody defines body for PatchV2DevicesDeviceIdPoints for application/*+json ContentType.
type PatchV2DevicesDeviceIdPointsApplicationWildcardPlusJSONRequestBody PatchV2DevicesDeviceIdPointsApplicationWildcardPlusJSONBody

// PatchV2DevicesDeviceIdPointsJSONRequestBody defines body for PatchV2DevicesDeviceIdPoints for application/json ContentType.
type PatchV2DevicesDeviceIdPointsJSONRequestBody PatchV2DevicesDeviceIdPointsJSONBody

// PatchV2DevicesDeviceIdPointsApplicationJSONPatchPlusJSONRequestBody defines body for PatchV2DevicesDeviceIdPoints for application/json-patch+json ContentType.
type PatchV2DevicesDeviceIdPointsApplicationJSONPatchPlusJSONRequestBody PatchV2DevicesDeviceIdPointsApplicationJSONPatchPlusJSONBody

// PatchV2DevicesDeviceIdZonesZoneIdApplicationWildcardPlusJSONRequestBody defines body for PatchV2DevicesDeviceIdZonesZoneId for application/*+json ContentType.
type PatchV2DevicesDeviceIdZonesZoneIdApplicationWildcardPlusJSONRequestBody = ZonePatchRequest

// PatchV2DevicesDeviceIdZonesZoneIdJSONRequestBody defines body for PatchV2DevicesDeviceIdZonesZoneId for application/json ContentType.
type PatchV2DevicesDeviceIdZonesZoneIdJSONRequestBody = ZonePatchRequest

// PatchV2DevicesDeviceIdZonesZoneIdApplicationJSONPatchPlusJSONRequestBody defines body for PatchV2DevicesDeviceIdZonesZoneId for application/json-patch+json ContentType.
type PatchV2DevicesDeviceIdZonesZoneIdApplicationJSONPatchPlusJSONRequestBody = ZonePatchRequest

// PutV2SystemsSystemIdSmartHomeModeApplicationWildcardPlusJSONRequestBody defines body for PutV2SystemsSystemIdSmartHomeMode for application/*+json ContentType.
type PutV2SystemsSystemIdSmartHomeModeApplicationWildcardPlusJSONRequestBody = SmartHomeModeModel

// PutV2SystemsSystemIdSmartHomeModeJSONRequestBody defines body for PutV2SystemsSystemIdSmartHomeMode for application/json ContentType.
type PutV2SystemsSystemIdSmartHomeModeJSONRequestBody = SmartHomeModeModel

// PutV2SystemsSystemIdSmartHomeModeApplicationJSONPatchPlusJSONRequestBody defines body for PutV2SystemsSystemIdSmartHomeMode for application/json-patch+json ContentType.
type PutV2SystemsSystemIdSmartHomeModeApplicationJSONPatchPlusJSONRequestBody = SmartHomeModeModel

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetWellKnownOpenidConfiguration request
	GetWellKnownOpenidConfiguration(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWellKnownOpenidConfigurationJwks request
	GetWellKnownOpenidConfigurationJwks(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAssetsIdentityServerAny request
	GetAssetsIdentityServerAny(ctx context.Context, any string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConnectAuthorizeCallback request
	GetConnectAuthorizeCallback(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOauthAuthorize request
	GetOauthAuthorize(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOauthAuthorize request
	PostOauthAuthorize(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOauthConsent request
	GetOauthConsent(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOauthConsent request
	PostOauthConsent(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOauthError request
	GetOauthError(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOauthLogin request
	GetOauthLogin(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOauthLogin request
	PostOauthLogin(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOauthToken request
	PostOauthToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2BrandsBrandIdFirmwareFirmwareTypeIdVersionVersionDownload request
	GetV2BrandsBrandIdFirmwareFirmwareTypeIdVersionVersionDownload(ctx context.Context, brandId string, firmwareTypeId string, version string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2DevicesDeviceId request
	GetV2DevicesDeviceId(ctx context.Context, deviceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2DevicesDeviceIdAidMode request
	GetV2DevicesDeviceIdAidMode(ctx context.Context, deviceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2DevicesDeviceIdFirmwareInfo request
	GetV2DevicesDeviceIdFirmwareInfo(ctx context.Context, deviceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2DevicesDeviceIdPoints request
	GetV2DevicesDeviceIdPoints(ctx context.Context, deviceId string, params *GetV2DevicesDeviceIdPointsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV2DevicesDeviceIdPointsWithBody request with any body
	PatchV2DevicesDeviceIdPointsWithBody(ctx context.Context, deviceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV2DevicesDeviceIdPointsWithApplicationWildcardPlusJSONBody(ctx context.Context, deviceId string, body PatchV2DevicesDeviceIdPointsApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV2DevicesDeviceIdPoints(ctx context.Context, deviceId string, body PatchV2DevicesDeviceIdPointsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV2DevicesDeviceIdPointsWithApplicationJSONPatchPlusJSONBody(ctx context.Context, deviceId string, body PatchV2DevicesDeviceIdPointsApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2DevicesDeviceIdSmartHomeCategories request
	GetV2DevicesDeviceIdSmartHomeCategories(ctx context.Context, deviceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2DevicesDeviceIdSmartHomeZones request
	GetV2DevicesDeviceIdSmartHomeZones(ctx context.Context, deviceId string, params *GetV2DevicesDeviceIdSmartHomeZonesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV2DevicesDeviceIdZonesZoneIdWithBody request with any body
	PatchV2DevicesDeviceIdZonesZoneIdWithBody(ctx context.Context, deviceId string, zoneId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV2DevicesDeviceIdZonesZoneIdWithApplicationWildcardPlusJSONBody(ctx context.Context, deviceId string, zoneId int32, body PatchV2DevicesDeviceIdZonesZoneIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV2DevicesDeviceIdZonesZoneId(ctx context.Context, deviceId string, zoneId int32, body PatchV2DevicesDeviceIdZonesZoneIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV2DevicesDeviceIdZonesZoneIdWithApplicationJSONPatchPlusJSONBody(ctx context.Context, deviceId string, zoneId int32, body PatchV2DevicesDeviceIdZonesZoneIdApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2FirmwareFirmwareTypeIdVersionVersionDownload request
	GetV2FirmwareFirmwareTypeIdVersionVersionDownload(ctx context.Context, firmwareTypeId string, version string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2ProtectedPing request
	GetV2ProtectedPing(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2SystemsMe request
	GetV2SystemsMe(ctx context.Context, params *GetV2SystemsMeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2SystemsSystemIdNotifications request
	GetV2SystemsSystemIdNotifications(ctx context.Context, systemId openapi_types.UUID, params *GetV2SystemsSystemIdNotificationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2SystemsSystemIdNotificationsActive request
	GetV2SystemsSystemIdNotificationsActive(ctx context.Context, systemId openapi_types.UUID, params *GetV2SystemsSystemIdNotificationsActiveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2SystemsSystemIdSmartHomeMode request
	GetV2SystemsSystemIdSmartHomeMode(ctx context.Context, systemId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV2SystemsSystemIdSmartHomeModeWithBody request with any body
	PutV2SystemsSystemIdSmartHomeModeWithBody(ctx context.Context, systemId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV2SystemsSystemIdSmartHomeModeWithApplicationWildcardPlusJSONBody(ctx context.Context, systemId openapi_types.UUID, body PutV2SystemsSystemIdSmartHomeModeApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV2SystemsSystemIdSmartHomeMode(ctx context.Context, systemId openapi_types.UUID, body PutV2SystemsSystemIdSmartHomeModeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV2SystemsSystemIdSmartHomeModeWithApplicationJSONPatchPlusJSONBody(ctx context.Context, systemId openapi_types.UUID, body PutV2SystemsSystemIdSmartHomeModeApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2SystemsSystemIdSubscriptions request
	GetV2SystemsSystemIdSubscriptions(ctx context.Context, systemId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3DevicesDeviceIdPoints request
	GetV3DevicesDeviceIdPoints(ctx context.Context, deviceId string, params *GetV3DevicesDeviceIdPointsParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetWellKnownOpenidConfiguration(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWellKnownOpenidConfigurationRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWellKnownOpenidConfigurationJwks(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWellKnownOpenidConfigurationJwksRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAssetsIdentityServerAny(ctx context.Context, any string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAssetsIdentityServerAnyRequest(c.Server, any)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConnectAuthorizeCallback(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConnectAuthorizeCallbackRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOauthAuthorize(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOauthAuthorizeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOauthAuthorize(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOauthAuthorizeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOauthConsent(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOauthConsentRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOauthConsent(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOauthConsentRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOauthError(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOauthErrorRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOauthLogin(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOauthLoginRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOauthLogin(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOauthLoginRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOauthToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOauthTokenRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2BrandsBrandIdFirmwareFirmwareTypeIdVersionVersionDownload(ctx context.Context, brandId string, firmwareTypeId string, version string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2BrandsBrandIdFirmwareFirmwareTypeIdVersionVersionDownloadRequest(c.Server, brandId, firmwareTypeId, version)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2DevicesDeviceId(ctx context.Context, deviceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2DevicesDeviceIdRequest(c.Server, deviceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2DevicesDeviceIdAidMode(ctx context.Context, deviceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2DevicesDeviceIdAidModeRequest(c.Server, deviceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2DevicesDeviceIdFirmwareInfo(ctx context.Context, deviceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2DevicesDeviceIdFirmwareInfoRequest(c.Server, deviceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2DevicesDeviceIdPoints(ctx context.Context, deviceId string, params *GetV2DevicesDeviceIdPointsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2DevicesDeviceIdPointsRequest(c.Server, deviceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV2DevicesDeviceIdPointsWithBody(ctx context.Context, deviceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV2DevicesDeviceIdPointsRequestWithBody(c.Server, deviceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV2DevicesDeviceIdPointsWithApplicationWildcardPlusJSONBody(ctx context.Context, deviceId string, body PatchV2DevicesDeviceIdPointsApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV2DevicesDeviceIdPointsRequestWithApplicationWildcardPlusJSONBody(c.Server, deviceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV2DevicesDeviceIdPoints(ctx context.Context, deviceId string, body PatchV2DevicesDeviceIdPointsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV2DevicesDeviceIdPointsRequest(c.Server, deviceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV2DevicesDeviceIdPointsWithApplicationJSONPatchPlusJSONBody(ctx context.Context, deviceId string, body PatchV2DevicesDeviceIdPointsApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV2DevicesDeviceIdPointsRequestWithApplicationJSONPatchPlusJSONBody(c.Server, deviceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2DevicesDeviceIdSmartHomeCategories(ctx context.Context, deviceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2DevicesDeviceIdSmartHomeCategoriesRequest(c.Server, deviceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2DevicesDeviceIdSmartHomeZones(ctx context.Context, deviceId string, params *GetV2DevicesDeviceIdSmartHomeZonesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2DevicesDeviceIdSmartHomeZonesRequest(c.Server, deviceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV2DevicesDeviceIdZonesZoneIdWithBody(ctx context.Context, deviceId string, zoneId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV2DevicesDeviceIdZonesZoneIdRequestWithBody(c.Server, deviceId, zoneId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV2DevicesDeviceIdZonesZoneIdWithApplicationWildcardPlusJSONBody(ctx context.Context, deviceId string, zoneId int32, body PatchV2DevicesDeviceIdZonesZoneIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV2DevicesDeviceIdZonesZoneIdRequestWithApplicationWildcardPlusJSONBody(c.Server, deviceId, zoneId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV2DevicesDeviceIdZonesZoneId(ctx context.Context, deviceId string, zoneId int32, body PatchV2DevicesDeviceIdZonesZoneIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV2DevicesDeviceIdZonesZoneIdRequest(c.Server, deviceId, zoneId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV2DevicesDeviceIdZonesZoneIdWithApplicationJSONPatchPlusJSONBody(ctx context.Context, deviceId string, zoneId int32, body PatchV2DevicesDeviceIdZonesZoneIdApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV2DevicesDeviceIdZonesZoneIdRequestWithApplicationJSONPatchPlusJSONBody(c.Server, deviceId, zoneId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2FirmwareFirmwareTypeIdVersionVersionDownload(ctx context.Context, firmwareTypeId string, version string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2FirmwareFirmwareTypeIdVersionVersionDownloadRequest(c.Server, firmwareTypeId, version)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2ProtectedPing(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2ProtectedPingRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2SystemsMe(ctx context.Context, params *GetV2SystemsMeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2SystemsMeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2SystemsSystemIdNotifications(ctx context.Context, systemId openapi_types.UUID, params *GetV2SystemsSystemIdNotificationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2SystemsSystemIdNotificationsRequest(c.Server, systemId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2SystemsSystemIdNotificationsActive(ctx context.Context, systemId openapi_types.UUID, params *GetV2SystemsSystemIdNotificationsActiveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2SystemsSystemIdNotificationsActiveRequest(c.Server, systemId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2SystemsSystemIdSmartHomeMode(ctx context.Context, systemId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2SystemsSystemIdSmartHomeModeRequest(c.Server, systemId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV2SystemsSystemIdSmartHomeModeWithBody(ctx context.Context, systemId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV2SystemsSystemIdSmartHomeModeRequestWithBody(c.Server, systemId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV2SystemsSystemIdSmartHomeModeWithApplicationWildcardPlusJSONBody(ctx context.Context, systemId openapi_types.UUID, body PutV2SystemsSystemIdSmartHomeModeApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV2SystemsSystemIdSmartHomeModeRequestWithApplicationWildcardPlusJSONBody(c.Server, systemId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV2SystemsSystemIdSmartHomeMode(ctx context.Context, systemId openapi_types.UUID, body PutV2SystemsSystemIdSmartHomeModeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV2SystemsSystemIdSmartHomeModeRequest(c.Server, systemId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV2SystemsSystemIdSmartHomeModeWithApplicationJSONPatchPlusJSONBody(ctx context.Context, systemId openapi_types.UUID, body PutV2SystemsSystemIdSmartHomeModeApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV2SystemsSystemIdSmartHomeModeRequestWithApplicationJSONPatchPlusJSONBody(c.Server, systemId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2SystemsSystemIdSubscriptions(ctx context.Context, systemId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2SystemsSystemIdSubscriptionsRequest(c.Server, systemId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3DevicesDeviceIdPoints(ctx context.Context, deviceId string, params *GetV3DevicesDeviceIdPointsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3DevicesDeviceIdPointsRequest(c.Server, deviceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetWellKnownOpenidConfigurationRequest generates requests for GetWellKnownOpenidConfiguration
func NewGetWellKnownOpenidConfigurationRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/.well-known/openid-configuration")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWellKnownOpenidConfigurationJwksRequest generates requests for GetWellKnownOpenidConfigurationJwks
func NewGetWellKnownOpenidConfigurationJwksRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/.well-known/openid-configuration/jwks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAssetsIdentityServerAnyRequest generates requests for GetAssetsIdentityServerAny
func NewGetAssetsIdentityServerAnyRequest(server string, any string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "any", runtime.ParamLocationPath, any)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/assets/identity-server/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetConnectAuthorizeCallbackRequest generates requests for GetConnectAuthorizeCallback
func NewGetConnectAuthorizeCallbackRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/connect/authorize/callback")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOauthAuthorizeRequest generates requests for GetOauthAuthorize
func NewGetOauthAuthorizeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oauth/authorize")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOauthAuthorizeRequest generates requests for PostOauthAuthorize
func NewPostOauthAuthorizeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oauth/authorize")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOauthConsentRequest generates requests for GetOauthConsent
func NewGetOauthConsentRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oauth/consent")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOauthConsentRequest generates requests for PostOauthConsent
func NewPostOauthConsentRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oauth/consent")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOauthErrorRequest generates requests for GetOauthError
func NewGetOauthErrorRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oauth/error")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOauthLoginRequest generates requests for GetOauthLogin
func NewGetOauthLoginRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oauth/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOauthLoginRequest generates requests for PostOauthLogin
func NewPostOauthLoginRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oauth/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOauthTokenRequest generates requests for PostOauthToken
func NewPostOauthTokenRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oauth/token")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2BrandsBrandIdFirmwareFirmwareTypeIdVersionVersionDownloadRequest generates requests for GetV2BrandsBrandIdFirmwareFirmwareTypeIdVersionVersionDownload
func NewGetV2BrandsBrandIdFirmwareFirmwareTypeIdVersionVersionDownloadRequest(server string, brandId string, firmwareTypeId string, version string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "brandId", runtime.ParamLocationPath, brandId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "firmwareTypeId", runtime.ParamLocationPath, firmwareTypeId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/brands/%s/firmware/%s/version/%s/download", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2DevicesDeviceIdRequest generates requests for GetV2DevicesDeviceId
func NewGetV2DevicesDeviceIdRequest(server string, deviceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deviceId", runtime.ParamLocationPath, deviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/devices/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2DevicesDeviceIdAidModeRequest generates requests for GetV2DevicesDeviceIdAidMode
func NewGetV2DevicesDeviceIdAidModeRequest(server string, deviceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deviceId", runtime.ParamLocationPath, deviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/devices/%s/aidMode", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2DevicesDeviceIdFirmwareInfoRequest generates requests for GetV2DevicesDeviceIdFirmwareInfo
func NewGetV2DevicesDeviceIdFirmwareInfoRequest(server string, deviceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deviceId", runtime.ParamLocationPath, deviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/devices/%s/firmware-info", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2DevicesDeviceIdPointsRequest generates requests for GetV2DevicesDeviceIdPoints
func NewGetV2DevicesDeviceIdPointsRequest(server string, deviceId string, params *GetV2DevicesDeviceIdPointsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deviceId", runtime.ParamLocationPath, deviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/devices/%s/points", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Parameters != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parameters", runtime.ParamLocationQuery, *params.Parameters); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

	}

	return req, nil
}

// NewPatchV2DevicesDeviceIdPointsRequestWithApplicationWildcardPlusJSONBody calls the generic PatchV2DevicesDeviceIdPoints builder with application/*+json body
func NewPatchV2DevicesDeviceIdPointsRequestWithApplicationWildcardPlusJSONBody(server string, deviceId string, body PatchV2DevicesDeviceIdPointsApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV2DevicesDeviceIdPointsRequestWithBody(server, deviceId, "application/*+json", bodyReader)
}

// NewPatchV2DevicesDeviceIdPointsRequest calls the generic PatchV2DevicesDeviceIdPoints builder with application/json body
func NewPatchV2DevicesDeviceIdPointsRequest(server string, deviceId string, body PatchV2DevicesDeviceIdPointsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV2DevicesDeviceIdPointsRequestWithBody(server, deviceId, "application/json", bodyReader)
}

// NewPatchV2DevicesDeviceIdPointsRequestWithApplicationJSONPatchPlusJSONBody calls the generic PatchV2DevicesDeviceIdPoints builder with application/json-patch+json body
func NewPatchV2DevicesDeviceIdPointsRequestWithApplicationJSONPatchPlusJSONBody(server string, deviceId string, body PatchV2DevicesDeviceIdPointsApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV2DevicesDeviceIdPointsRequestWithBody(server, deviceId, "application/json-patch+json", bodyReader)
}

// NewPatchV2DevicesDeviceIdPointsRequestWithBody generates requests for PatchV2DevicesDeviceIdPoints with any type of body
func NewPatchV2DevicesDeviceIdPointsRequestWithBody(server string, deviceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deviceId", runtime.ParamLocationPath, deviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/devices/%s/points", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV2DevicesDeviceIdSmartHomeCategoriesRequest generates requests for GetV2DevicesDeviceIdSmartHomeCategories
func NewGetV2DevicesDeviceIdSmartHomeCategoriesRequest(server string, deviceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deviceId", runtime.ParamLocationPath, deviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/devices/%s/smart-home-categories", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2DevicesDeviceIdSmartHomeZonesRequest generates requests for GetV2DevicesDeviceIdSmartHomeZones
func NewGetV2DevicesDeviceIdSmartHomeZonesRequest(server string, deviceId string, params *GetV2DevicesDeviceIdSmartHomeZonesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deviceId", runtime.ParamLocationPath, deviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/devices/%s/smart-home-zones", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

	}

	return req, nil
}

// NewPatchV2DevicesDeviceIdZonesZoneIdRequestWithApplicationWildcardPlusJSONBody calls the generic PatchV2DevicesDeviceIdZonesZoneId builder with application/*+json body
func NewPatchV2DevicesDeviceIdZonesZoneIdRequestWithApplicationWildcardPlusJSONBody(server string, deviceId string, zoneId int32, body PatchV2DevicesDeviceIdZonesZoneIdApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV2DevicesDeviceIdZonesZoneIdRequestWithBody(server, deviceId, zoneId, "application/*+json", bodyReader)
}

// NewPatchV2DevicesDeviceIdZonesZoneIdRequest calls the generic PatchV2DevicesDeviceIdZonesZoneId builder with application/json body
func NewPatchV2DevicesDeviceIdZonesZoneIdRequest(server string, deviceId string, zoneId int32, body PatchV2DevicesDeviceIdZonesZoneIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV2DevicesDeviceIdZonesZoneIdRequestWithBody(server, deviceId, zoneId, "application/json", bodyReader)
}

// NewPatchV2DevicesDeviceIdZonesZoneIdRequestWithApplicationJSONPatchPlusJSONBody calls the generic PatchV2DevicesDeviceIdZonesZoneId builder with application/json-patch+json body
func NewPatchV2DevicesDeviceIdZonesZoneIdRequestWithApplicationJSONPatchPlusJSONBody(server string, deviceId string, zoneId int32, body PatchV2DevicesDeviceIdZonesZoneIdApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV2DevicesDeviceIdZonesZoneIdRequestWithBody(server, deviceId, zoneId, "application/json-patch+json", bodyReader)
}

// NewPatchV2DevicesDeviceIdZonesZoneIdRequestWithBody generates requests for PatchV2DevicesDeviceIdZonesZoneId with any type of body
func NewPatchV2DevicesDeviceIdZonesZoneIdRequestWithBody(server string, deviceId string, zoneId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deviceId", runtime.ParamLocationPath, deviceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, zoneId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/devices/%s/zones/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV2FirmwareFirmwareTypeIdVersionVersionDownloadRequest generates requests for GetV2FirmwareFirmwareTypeIdVersionVersionDownload
func NewGetV2FirmwareFirmwareTypeIdVersionVersionDownloadRequest(server string, firmwareTypeId string, version string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "firmwareTypeId", runtime.ParamLocationPath, firmwareTypeId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/firmware/%s/version/%s/download", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2ProtectedPingRequest generates requests for GetV2ProtectedPing
func NewGetV2ProtectedPingRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/protected-ping")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2SystemsMeRequest generates requests for GetV2SystemsMe
func NewGetV2SystemsMeRequest(server string, params *GetV2SystemsMeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/systems/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ItemsPerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "itemsPerPage", runtime.ParamLocationQuery, *params.ItemsPerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2SystemsSystemIdNotificationsRequest generates requests for GetV2SystemsSystemIdNotifications
func NewGetV2SystemsSystemIdNotificationsRequest(server string, systemId openapi_types.UUID, params *GetV2SystemsSystemIdNotificationsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "systemId", runtime.ParamLocationPath, systemId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/systems/%s/notifications", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ItemsPerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "itemsPerPage", runtime.ParamLocationQuery, *params.ItemsPerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

	}

	return req, nil
}

// NewGetV2SystemsSystemIdNotificationsActiveRequest generates requests for GetV2SystemsSystemIdNotificationsActive
func NewGetV2SystemsSystemIdNotificationsActiveRequest(server string, systemId openapi_types.UUID, params *GetV2SystemsSystemIdNotificationsActiveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "systemId", runtime.ParamLocationPath, systemId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/systems/%s/notifications/active", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ItemsPerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "itemsPerPage", runtime.ParamLocationQuery, *params.ItemsPerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

	}

	return req, nil
}

// NewGetV2SystemsSystemIdSmartHomeModeRequest generates requests for GetV2SystemsSystemIdSmartHomeMode
func NewGetV2SystemsSystemIdSmartHomeModeRequest(server string, systemId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "systemId", runtime.ParamLocationPath, systemId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/systems/%s/smart-home-mode", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV2SystemsSystemIdSmartHomeModeRequestWithApplicationWildcardPlusJSONBody calls the generic PutV2SystemsSystemIdSmartHomeMode builder with application/*+json body
func NewPutV2SystemsSystemIdSmartHomeModeRequestWithApplicationWildcardPlusJSONBody(server string, systemId openapi_types.UUID, body PutV2SystemsSystemIdSmartHomeModeApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV2SystemsSystemIdSmartHomeModeRequestWithBody(server, systemId, "application/*+json", bodyReader)
}

// NewPutV2SystemsSystemIdSmartHomeModeRequest calls the generic PutV2SystemsSystemIdSmartHomeMode builder with application/json body
func NewPutV2SystemsSystemIdSmartHomeModeRequest(server string, systemId openapi_types.UUID, body PutV2SystemsSystemIdSmartHomeModeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV2SystemsSystemIdSmartHomeModeRequestWithBody(server, systemId, "application/json", bodyReader)
}

// NewPutV2SystemsSystemIdSmartHomeModeRequestWithApplicationJSONPatchPlusJSONBody calls the generic PutV2SystemsSystemIdSmartHomeMode builder with application/json-patch+json body
func NewPutV2SystemsSystemIdSmartHomeModeRequestWithApplicationJSONPatchPlusJSONBody(server string, systemId openapi_types.UUID, body PutV2SystemsSystemIdSmartHomeModeApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV2SystemsSystemIdSmartHomeModeRequestWithBody(server, systemId, "application/json-patch+json", bodyReader)
}

// NewPutV2SystemsSystemIdSmartHomeModeRequestWithBody generates requests for PutV2SystemsSystemIdSmartHomeMode with any type of body
func NewPutV2SystemsSystemIdSmartHomeModeRequestWithBody(server string, systemId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "systemId", runtime.ParamLocationPath, systemId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/systems/%s/smart-home-mode", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV2SystemsSystemIdSubscriptionsRequest generates requests for GetV2SystemsSystemIdSubscriptions
func NewGetV2SystemsSystemIdSubscriptionsRequest(server string, systemId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "systemId", runtime.ParamLocationPath, systemId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/systems/%s/subscriptions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3DevicesDeviceIdPointsRequest generates requests for GetV3DevicesDeviceIdPoints
func NewGetV3DevicesDeviceIdPointsRequest(server string, deviceId string, params *GetV3DevicesDeviceIdPointsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deviceId", runtime.ParamLocationPath, deviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/devices/%s/points", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Parameters != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parameters", runtime.ParamLocationQuery, *params.Parameters); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetWellKnownOpenidConfigurationWithResponse request
	GetWellKnownOpenidConfigurationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWellKnownOpenidConfigurationResponse, error)

	// GetWellKnownOpenidConfigurationJwksWithResponse request
	GetWellKnownOpenidConfigurationJwksWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWellKnownOpenidConfigurationJwksResponse, error)

	// GetAssetsIdentityServerAnyWithResponse request
	GetAssetsIdentityServerAnyWithResponse(ctx context.Context, any string, reqEditors ...RequestEditorFn) (*GetAssetsIdentityServerAnyResponse, error)

	// GetConnectAuthorizeCallbackWithResponse request
	GetConnectAuthorizeCallbackWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetConnectAuthorizeCallbackResponse, error)

	// GetOauthAuthorizeWithResponse request
	GetOauthAuthorizeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOauthAuthorizeResponse, error)

	// PostOauthAuthorizeWithResponse request
	PostOauthAuthorizeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostOauthAuthorizeResponse, error)

	// GetOauthConsentWithResponse request
	GetOauthConsentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOauthConsentResponse, error)

	// PostOauthConsentWithResponse request
	PostOauthConsentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostOauthConsentResponse, error)

	// GetOauthErrorWithResponse request
	GetOauthErrorWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOauthErrorResponse, error)

	// GetOauthLoginWithResponse request
	GetOauthLoginWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOauthLoginResponse, error)

	// PostOauthLoginWithResponse request
	PostOauthLoginWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostOauthLoginResponse, error)

	// PostOauthTokenWithResponse request
	PostOauthTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostOauthTokenResponse, error)

	// GetV2BrandsBrandIdFirmwareFirmwareTypeIdVersionVersionDownloadWithResponse request
	GetV2BrandsBrandIdFirmwareFirmwareTypeIdVersionVersionDownloadWithResponse(ctx context.Context, brandId string, firmwareTypeId string, version string, reqEditors ...RequestEditorFn) (*GetV2BrandsBrandIdFirmwareFirmwareTypeIdVersionVersionDownloadResponse, error)

	// GetV2DevicesDeviceIdWithResponse request
	GetV2DevicesDeviceIdWithResponse(ctx context.Context, deviceId string, reqEditors ...RequestEditorFn) (*GetV2DevicesDeviceIdResponse, error)

	// GetV2DevicesDeviceIdAidModeWithResponse request
	GetV2DevicesDeviceIdAidModeWithResponse(ctx context.Context, deviceId string, reqEditors ...RequestEditorFn) (*GetV2DevicesDeviceIdAidModeResponse, error)

	// GetV2DevicesDeviceIdFirmwareInfoWithResponse request
	GetV2DevicesDeviceIdFirmwareInfoWithResponse(ctx context.Context, deviceId string, reqEditors ...RequestEditorFn) (*GetV2DevicesDeviceIdFirmwareInfoResponse, error)

	// GetV2DevicesDeviceIdPointsWithResponse request
	GetV2DevicesDeviceIdPointsWithResponse(ctx context.Context, deviceId string, params *GetV2DevicesDeviceIdPointsParams, reqEditors ...RequestEditorFn) (*GetV2DevicesDeviceIdPointsResponse, error)

	// PatchV2DevicesDeviceIdPointsWithBodyWithResponse request with any body
	PatchV2DevicesDeviceIdPointsWithBodyWithResponse(ctx context.Context, deviceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV2DevicesDeviceIdPointsResponse, error)

	PatchV2DevicesDeviceIdPointsWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, deviceId string, body PatchV2DevicesDeviceIdPointsApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV2DevicesDeviceIdPointsResponse, error)

	PatchV2DevicesDeviceIdPointsWithResponse(ctx context.Context, deviceId string, body PatchV2DevicesDeviceIdPointsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV2DevicesDeviceIdPointsResponse, error)

	PatchV2DevicesDeviceIdPointsWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, deviceId string, body PatchV2DevicesDeviceIdPointsApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV2DevicesDeviceIdPointsResponse, error)

	// GetV2DevicesDeviceIdSmartHomeCategoriesWithResponse request
	GetV2DevicesDeviceIdSmartHomeCategoriesWithResponse(ctx context.Context, deviceId string, reqEditors ...RequestEditorFn) (*GetV2DevicesDeviceIdSmartHomeCategoriesResponse, error)

	// GetV2DevicesDeviceIdSmartHomeZonesWithResponse request
	GetV2DevicesDeviceIdSmartHomeZonesWithResponse(ctx context.Context, deviceId string, params *GetV2DevicesDeviceIdSmartHomeZonesParams, reqEditors ...RequestEditorFn) (*GetV2DevicesDeviceIdSmartHomeZonesResponse, error)

	// PatchV2DevicesDeviceIdZonesZoneIdWithBodyWithResponse request with any body
	PatchV2DevicesDeviceIdZonesZoneIdWithBodyWithResponse(ctx context.Context, deviceId string, zoneId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV2DevicesDeviceIdZonesZoneIdResponse, error)

	PatchV2DevicesDeviceIdZonesZoneIdWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, deviceId string, zoneId int32, body PatchV2DevicesDeviceIdZonesZoneIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV2DevicesDeviceIdZonesZoneIdResponse, error)

	PatchV2DevicesDeviceIdZonesZoneIdWithResponse(ctx context.Context, deviceId string, zoneId int32, body PatchV2DevicesDeviceIdZonesZoneIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV2DevicesDeviceIdZonesZoneIdResponse, error)

	PatchV2DevicesDeviceIdZonesZoneIdWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, deviceId string, zoneId int32, body PatchV2DevicesDeviceIdZonesZoneIdApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV2DevicesDeviceIdZonesZoneIdResponse, error)

	// GetV2FirmwareFirmwareTypeIdVersionVersionDownloadWithResponse request
	GetV2FirmwareFirmwareTypeIdVersionVersionDownloadWithResponse(ctx context.Context, firmwareTypeId string, version string, reqEditors ...RequestEditorFn) (*GetV2FirmwareFirmwareTypeIdVersionVersionDownloadResponse, error)

	// GetV2ProtectedPingWithResponse request
	GetV2ProtectedPingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV2ProtectedPingResponse, error)

	// GetV2SystemsMeWithResponse request
	GetV2SystemsMeWithResponse(ctx context.Context, params *GetV2SystemsMeParams, reqEditors ...RequestEditorFn) (*GetV2SystemsMeResponse, error)

	// GetV2SystemsSystemIdNotificationsWithResponse request
	GetV2SystemsSystemIdNotificationsWithResponse(ctx context.Context, systemId openapi_types.UUID, params *GetV2SystemsSystemIdNotificationsParams, reqEditors ...RequestEditorFn) (*GetV2SystemsSystemIdNotificationsResponse, error)

	// GetV2SystemsSystemIdNotificationsActiveWithResponse request
	GetV2SystemsSystemIdNotificationsActiveWithResponse(ctx context.Context, systemId openapi_types.UUID, params *GetV2SystemsSystemIdNotificationsActiveParams, reqEditors ...RequestEditorFn) (*GetV2SystemsSystemIdNotificationsActiveResponse, error)

	// GetV2SystemsSystemIdSmartHomeModeWithResponse request
	GetV2SystemsSystemIdSmartHomeModeWithResponse(ctx context.Context, systemId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV2SystemsSystemIdSmartHomeModeResponse, error)

	// PutV2SystemsSystemIdSmartHomeModeWithBodyWithResponse request with any body
	PutV2SystemsSystemIdSmartHomeModeWithBodyWithResponse(ctx context.Context, systemId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV2SystemsSystemIdSmartHomeModeResponse, error)

	PutV2SystemsSystemIdSmartHomeModeWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, systemId openapi_types.UUID, body PutV2SystemsSystemIdSmartHomeModeApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV2SystemsSystemIdSmartHomeModeResponse, error)

	PutV2SystemsSystemIdSmartHomeModeWithResponse(ctx context.Context, systemId openapi_types.UUID, body PutV2SystemsSystemIdSmartHomeModeJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV2SystemsSystemIdSmartHomeModeResponse, error)

	PutV2SystemsSystemIdSmartHomeModeWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, systemId openapi_types.UUID, body PutV2SystemsSystemIdSmartHomeModeApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV2SystemsSystemIdSmartHomeModeResponse, error)

	// GetV2SystemsSystemIdSubscriptionsWithResponse request
	GetV2SystemsSystemIdSubscriptionsWithResponse(ctx context.Context, systemId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV2SystemsSystemIdSubscriptionsResponse, error)

	// GetV3DevicesDeviceIdPointsWithResponse request
	GetV3DevicesDeviceIdPointsWithResponse(ctx context.Context, deviceId string, params *GetV3DevicesDeviceIdPointsParams, reqEditors ...RequestEditorFn) (*GetV3DevicesDeviceIdPointsResponse, error)
}

type GetWellKnownOpenidConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetWellKnownOpenidConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWellKnownOpenidConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWellKnownOpenidConfigurationJwksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetWellKnownOpenidConfigurationJwksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWellKnownOpenidConfigurationJwksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAssetsIdentityServerAnyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAssetsIdentityServerAnyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAssetsIdentityServerAnyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConnectAuthorizeCallbackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetConnectAuthorizeCallbackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConnectAuthorizeCallbackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOauthAuthorizeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetOauthAuthorizeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOauthAuthorizeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOauthAuthorizeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostOauthAuthorizeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOauthAuthorizeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOauthConsentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetOauthConsentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOauthConsentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOauthConsentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostOauthConsentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOauthConsentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOauthErrorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetOauthErrorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOauthErrorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOauthLoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetOauthLoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOauthLoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOauthLoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostOauthLoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOauthLoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOauthTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostOauthTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOauthTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2BrandsBrandIdFirmwareFirmwareTypeIdVersionVersionDownloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *openapi_types.File
}

// Status returns HTTPResponse.Status
func (r GetV2BrandsBrandIdFirmwareFirmwareTypeIdVersionVersionDownloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2BrandsBrandIdFirmwareFirmwareTypeIdVersionVersionDownloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2DevicesDeviceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeviceResponseModel
}

// Status returns HTTPResponse.Status
func (r GetV2DevicesDeviceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2DevicesDeviceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2DevicesDeviceIdAidModeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AidModeResponseModel
}

// Status returns HTTPResponse.Status
func (r GetV2DevicesDeviceIdAidModeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2DevicesDeviceIdAidModeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2DevicesDeviceIdFirmwareInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeviceFirmwareInfoResponse
}

// Status returns HTTPResponse.Status
func (r GetV2DevicesDeviceIdFirmwareInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2DevicesDeviceIdFirmwareInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2DevicesDeviceIdPointsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ParameterData
}

// Status returns HTTPResponse.Status
func (r GetV2DevicesDeviceIdPointsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2DevicesDeviceIdPointsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV2DevicesDeviceIdPointsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CloudToDeviceMethodResult
}

// Status returns HTTPResponse.Status
func (r PatchV2DevicesDeviceIdPointsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV2DevicesDeviceIdPointsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2DevicesDeviceIdSmartHomeCategoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		ShElectricPowerUsedCurrently   *bool `json:"sh-electricPowerUsedCurrently,omitempty"`
		ShElectricalPriceMode          *bool `json:"sh-electricalPriceMode,omitempty"`
		ShElectricalPriceModeDuration  *bool `json:"sh-electricalPriceModeDuration,omitempty"`
		ShEnergyMetered                *bool `json:"sh-energyMetered,omitempty"`
		ShFanMode                      *bool `json:"sh-fanMode,omitempty"`
		ShFanStatus                    *bool `json:"sh-fanStatus,omitempty"`
		ShHwBoost                      *bool `json:"sh-hwBoost,omitempty"`
		ShHwMode                       *bool `json:"sh-hwMode,omitempty"`
		ShHwTemp                       *bool `json:"sh-hwTemp,omitempty"`
		ShIndoorCO2                    *bool `json:"sh-indoorCO2,omitempty"`
		ShIndoorCO2Sp                  *bool `json:"sh-indoorCO2Sp,omitempty"`
		ShIndoorDeHumiditySp           *bool `json:"sh-indoorDeHumiditySp,omitempty"`
		ShIndoorHumidity               *bool `json:"sh-indoorHumidity,omitempty"`
		ShIndoorHumidityMode           *bool `json:"sh-indoorHumidityMode,omitempty"`
		ShIndoorHumiditySp             *bool `json:"sh-indoorHumiditySp,omitempty"`
		ShIndoorSpCool                 *bool `json:"sh-indoorSpCool,omitempty"`
		ShIndoorSpHeat                 *bool `json:"sh-indoorSpHeat,omitempty"`
		ShIndoorSpOffsCool             *bool `json:"sh-indoorSpOffsCool,omitempty"`
		ShIndoorSpOffsHeat             *bool `json:"sh-indoorSpOffsHeat,omitempty"`
		ShIndoorTemp                   *bool `json:"sh-indoorTemp,omitempty"`
		ShOutdoorTemp                  *bool `json:"sh-outdoorTemp,omitempty"`
		ShPoolSp                       *bool `json:"sh-poolSp,omitempty"`
		ShPoolTemp                     *bool `json:"sh-poolTemp,omitempty"`
		ShReturnTemp                   *bool `json:"sh-returnTemp,omitempty"`
		ShSmartMode                    *bool `json:"sh-smartMode,omitempty"`
		ShSolarEnergyProducedDay       *bool `json:"sh-solarEnergyProducedDay,omitempty"`
		ShSolarEnergyProducedMonth     *bool `json:"sh-solarEnergyProducedMonth,omitempty"`
		ShSolarEnergyProducedTotal     *bool `json:"sh-solarEnergyProducedTotal,omitempty"`
		ShSolarEnergyProducedWeek      *bool `json:"sh-solarEnergyProducedWeek,omitempty"`
		ShSolarEnergyProducedYear      *bool `json:"sh-solarEnergyProducedYear,omitempty"`
		ShSolarPowerAvailableCurrently *bool `json:"sh-solarPowerAvailableCurrently,omitempty"`
		ShSupplyTemp                   *bool `json:"sh-supplyTemp,omitempty"`
		ShVentBoost                    *bool `json:"sh-ventBoost,omitempty"`
		ShVentMode                     *bool `json:"sh-ventMode,omitempty"`
		ShZoneMode                     *bool `json:"sh-zoneMode,omitempty"`
		ShZones                        *bool `json:"sh-zones,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV2DevicesDeviceIdSmartHomeCategoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2DevicesDeviceIdSmartHomeCategoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2DevicesDeviceIdSmartHomeZonesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ZoneResponse
}

// Status returns HTTPResponse.Status
func (r GetV2DevicesDeviceIdSmartHomeZonesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2DevicesDeviceIdSmartHomeZonesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV2DevicesDeviceIdZonesZoneIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]string
}

// Status returns HTTPResponse.Status
func (r PatchV2DevicesDeviceIdZonesZoneIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV2DevicesDeviceIdZonesZoneIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2FirmwareFirmwareTypeIdVersionVersionDownloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *openapi_types.File
}

// Status returns HTTPResponse.Status
func (r GetV2FirmwareFirmwareTypeIdVersionVersionDownloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2FirmwareFirmwareTypeIdVersionVersionDownloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2ProtectedPingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetV2ProtectedPingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2ProtectedPingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2SystemsMeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PagedSystemResult
}

// Status returns HTTPResponse.Status
func (r GetV2SystemsMeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2SystemsMeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2SystemsSystemIdNotificationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AlarmsPaged
}

// Status returns HTTPResponse.Status
func (r GetV2SystemsSystemIdNotificationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2SystemsSystemIdNotificationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2SystemsSystemIdNotificationsActiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AlarmsPaged
}

// Status returns HTTPResponse.Status
func (r GetV2SystemsSystemIdNotificationsActiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2SystemsSystemIdNotificationsActiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2SystemsSystemIdSmartHomeModeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SmartHomeModeModel
}

// Status returns HTTPResponse.Status
func (r GetV2SystemsSystemIdSmartHomeModeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2SystemsSystemIdSmartHomeModeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV2SystemsSystemIdSmartHomeModeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutV2SystemsSystemIdSmartHomeModeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV2SystemsSystemIdSmartHomeModeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2SystemsSystemIdSubscriptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DevicePremiumResponse
}

// Status returns HTTPResponse.Status
func (r GetV2SystemsSystemIdSubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2SystemsSystemIdSubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3DevicesDeviceIdPointsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ParameterData
}

// Status returns HTTPResponse.Status
func (r GetV3DevicesDeviceIdPointsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3DevicesDeviceIdPointsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetWellKnownOpenidConfigurationWithResponse request returning *GetWellKnownOpenidConfigurationResponse
func (c *ClientWithResponses) GetWellKnownOpenidConfigurationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWellKnownOpenidConfigurationResponse, error) {
	rsp, err := c.GetWellKnownOpenidConfiguration(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWellKnownOpenidConfigurationResponse(rsp)
}

// GetWellKnownOpenidConfigurationJwksWithResponse request returning *GetWellKnownOpenidConfigurationJwksResponse
func (c *ClientWithResponses) GetWellKnownOpenidConfigurationJwksWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWellKnownOpenidConfigurationJwksResponse, error) {
	rsp, err := c.GetWellKnownOpenidConfigurationJwks(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWellKnownOpenidConfigurationJwksResponse(rsp)
}

// GetAssetsIdentityServerAnyWithResponse request returning *GetAssetsIdentityServerAnyResponse
func (c *ClientWithResponses) GetAssetsIdentityServerAnyWithResponse(ctx context.Context, any string, reqEditors ...RequestEditorFn) (*GetAssetsIdentityServerAnyResponse, error) {
	rsp, err := c.GetAssetsIdentityServerAny(ctx, any, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAssetsIdentityServerAnyResponse(rsp)
}

// GetConnectAuthorizeCallbackWithResponse request returning *GetConnectAuthorizeCallbackResponse
func (c *ClientWithResponses) GetConnectAuthorizeCallbackWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetConnectAuthorizeCallbackResponse, error) {
	rsp, err := c.GetConnectAuthorizeCallback(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConnectAuthorizeCallbackResponse(rsp)
}

// GetOauthAuthorizeWithResponse request returning *GetOauthAuthorizeResponse
func (c *ClientWithResponses) GetOauthAuthorizeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOauthAuthorizeResponse, error) {
	rsp, err := c.GetOauthAuthorize(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOauthAuthorizeResponse(rsp)
}

// PostOauthAuthorizeWithResponse request returning *PostOauthAuthorizeResponse
func (c *ClientWithResponses) PostOauthAuthorizeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostOauthAuthorizeResponse, error) {
	rsp, err := c.PostOauthAuthorize(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOauthAuthorizeResponse(rsp)
}

// GetOauthConsentWithResponse request returning *GetOauthConsentResponse
func (c *ClientWithResponses) GetOauthConsentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOauthConsentResponse, error) {
	rsp, err := c.GetOauthConsent(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOauthConsentResponse(rsp)
}

// PostOauthConsentWithResponse request returning *PostOauthConsentResponse
func (c *ClientWithResponses) PostOauthConsentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostOauthConsentResponse, error) {
	rsp, err := c.PostOauthConsent(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOauthConsentResponse(rsp)
}

// GetOauthErrorWithResponse request returning *GetOauthErrorResponse
func (c *ClientWithResponses) GetOauthErrorWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOauthErrorResponse, error) {
	rsp, err := c.GetOauthError(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOauthErrorResponse(rsp)
}

// GetOauthLoginWithResponse request returning *GetOauthLoginResponse
func (c *ClientWithResponses) GetOauthLoginWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOauthLoginResponse, error) {
	rsp, err := c.GetOauthLogin(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOauthLoginResponse(rsp)
}

// PostOauthLoginWithResponse request returning *PostOauthLoginResponse
func (c *ClientWithResponses) PostOauthLoginWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostOauthLoginResponse, error) {
	rsp, err := c.PostOauthLogin(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOauthLoginResponse(rsp)
}

// PostOauthTokenWithResponse request returning *PostOauthTokenResponse
func (c *ClientWithResponses) PostOauthTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostOauthTokenResponse, error) {
	rsp, err := c.PostOauthToken(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOauthTokenResponse(rsp)
}

// GetV2BrandsBrandIdFirmwareFirmwareTypeIdVersionVersionDownloadWithResponse request returning *GetV2BrandsBrandIdFirmwareFirmwareTypeIdVersionVersionDownloadResponse
func (c *ClientWithResponses) GetV2BrandsBrandIdFirmwareFirmwareTypeIdVersionVersionDownloadWithResponse(ctx context.Context, brandId string, firmwareTypeId string, version string, reqEditors ...RequestEditorFn) (*GetV2BrandsBrandIdFirmwareFirmwareTypeIdVersionVersionDownloadResponse, error) {
	rsp, err := c.GetV2BrandsBrandIdFirmwareFirmwareTypeIdVersionVersionDownload(ctx, brandId, firmwareTypeId, version, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2BrandsBrandIdFirmwareFirmwareTypeIdVersionVersionDownloadResponse(rsp)
}

// GetV2DevicesDeviceIdWithResponse request returning *GetV2DevicesDeviceIdResponse
func (c *ClientWithResponses) GetV2DevicesDeviceIdWithResponse(ctx context.Context, deviceId string, reqEditors ...RequestEditorFn) (*GetV2DevicesDeviceIdResponse, error) {
	rsp, err := c.GetV2DevicesDeviceId(ctx, deviceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2DevicesDeviceIdResponse(rsp)
}

// GetV2DevicesDeviceIdAidModeWithResponse request returning *GetV2DevicesDeviceIdAidModeResponse
func (c *ClientWithResponses) GetV2DevicesDeviceIdAidModeWithResponse(ctx context.Context, deviceId string, reqEditors ...RequestEditorFn) (*GetV2DevicesDeviceIdAidModeResponse, error) {
	rsp, err := c.GetV2DevicesDeviceIdAidMode(ctx, deviceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2DevicesDeviceIdAidModeResponse(rsp)
}

// GetV2DevicesDeviceIdFirmwareInfoWithResponse request returning *GetV2DevicesDeviceIdFirmwareInfoResponse
func (c *ClientWithResponses) GetV2DevicesDeviceIdFirmwareInfoWithResponse(ctx context.Context, deviceId string, reqEditors ...RequestEditorFn) (*GetV2DevicesDeviceIdFirmwareInfoResponse, error) {
	rsp, err := c.GetV2DevicesDeviceIdFirmwareInfo(ctx, deviceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2DevicesDeviceIdFirmwareInfoResponse(rsp)
}

// GetV2DevicesDeviceIdPointsWithResponse request returning *GetV2DevicesDeviceIdPointsResponse
func (c *ClientWithResponses) GetV2DevicesDeviceIdPointsWithResponse(ctx context.Context, deviceId string, params *GetV2DevicesDeviceIdPointsParams, reqEditors ...RequestEditorFn) (*GetV2DevicesDeviceIdPointsResponse, error) {
	rsp, err := c.GetV2DevicesDeviceIdPoints(ctx, deviceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2DevicesDeviceIdPointsResponse(rsp)
}

// PatchV2DevicesDeviceIdPointsWithBodyWithResponse request with arbitrary body returning *PatchV2DevicesDeviceIdPointsResponse
func (c *ClientWithResponses) PatchV2DevicesDeviceIdPointsWithBodyWithResponse(ctx context.Context, deviceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV2DevicesDeviceIdPointsResponse, error) {
	rsp, err := c.PatchV2DevicesDeviceIdPointsWithBody(ctx, deviceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV2DevicesDeviceIdPointsResponse(rsp)
}

func (c *ClientWithResponses) PatchV2DevicesDeviceIdPointsWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, deviceId string, body PatchV2DevicesDeviceIdPointsApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV2DevicesDeviceIdPointsResponse, error) {
	rsp, err := c.PatchV2DevicesDeviceIdPointsWithApplicationWildcardPlusJSONBody(ctx, deviceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV2DevicesDeviceIdPointsResponse(rsp)
}

func (c *ClientWithResponses) PatchV2DevicesDeviceIdPointsWithResponse(ctx context.Context, deviceId string, body PatchV2DevicesDeviceIdPointsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV2DevicesDeviceIdPointsResponse, error) {
	rsp, err := c.PatchV2DevicesDeviceIdPoints(ctx, deviceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV2DevicesDeviceIdPointsResponse(rsp)
}

func (c *ClientWithResponses) PatchV2DevicesDeviceIdPointsWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, deviceId string, body PatchV2DevicesDeviceIdPointsApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV2DevicesDeviceIdPointsResponse, error) {
	rsp, err := c.PatchV2DevicesDeviceIdPointsWithApplicationJSONPatchPlusJSONBody(ctx, deviceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV2DevicesDeviceIdPointsResponse(rsp)
}

// GetV2DevicesDeviceIdSmartHomeCategoriesWithResponse request returning *GetV2DevicesDeviceIdSmartHomeCategoriesResponse
func (c *ClientWithResponses) GetV2DevicesDeviceIdSmartHomeCategoriesWithResponse(ctx context.Context, deviceId string, reqEditors ...RequestEditorFn) (*GetV2DevicesDeviceIdSmartHomeCategoriesResponse, error) {
	rsp, err := c.GetV2DevicesDeviceIdSmartHomeCategories(ctx, deviceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2DevicesDeviceIdSmartHomeCategoriesResponse(rsp)
}

// GetV2DevicesDeviceIdSmartHomeZonesWithResponse request returning *GetV2DevicesDeviceIdSmartHomeZonesResponse
func (c *ClientWithResponses) GetV2DevicesDeviceIdSmartHomeZonesWithResponse(ctx context.Context, deviceId string, params *GetV2DevicesDeviceIdSmartHomeZonesParams, reqEditors ...RequestEditorFn) (*GetV2DevicesDeviceIdSmartHomeZonesResponse, error) {
	rsp, err := c.GetV2DevicesDeviceIdSmartHomeZones(ctx, deviceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2DevicesDeviceIdSmartHomeZonesResponse(rsp)
}

// PatchV2DevicesDeviceIdZonesZoneIdWithBodyWithResponse request with arbitrary body returning *PatchV2DevicesDeviceIdZonesZoneIdResponse
func (c *ClientWithResponses) PatchV2DevicesDeviceIdZonesZoneIdWithBodyWithResponse(ctx context.Context, deviceId string, zoneId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV2DevicesDeviceIdZonesZoneIdResponse, error) {
	rsp, err := c.PatchV2DevicesDeviceIdZonesZoneIdWithBody(ctx, deviceId, zoneId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV2DevicesDeviceIdZonesZoneIdResponse(rsp)
}

func (c *ClientWithResponses) PatchV2DevicesDeviceIdZonesZoneIdWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, deviceId string, zoneId int32, body PatchV2DevicesDeviceIdZonesZoneIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV2DevicesDeviceIdZonesZoneIdResponse, error) {
	rsp, err := c.PatchV2DevicesDeviceIdZonesZoneIdWithApplicationWildcardPlusJSONBody(ctx, deviceId, zoneId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV2DevicesDeviceIdZonesZoneIdResponse(rsp)
}

func (c *ClientWithResponses) PatchV2DevicesDeviceIdZonesZoneIdWithResponse(ctx context.Context, deviceId string, zoneId int32, body PatchV2DevicesDeviceIdZonesZoneIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV2DevicesDeviceIdZonesZoneIdResponse, error) {
	rsp, err := c.PatchV2DevicesDeviceIdZonesZoneId(ctx, deviceId, zoneId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV2DevicesDeviceIdZonesZoneIdResponse(rsp)
}

func (c *ClientWithResponses) PatchV2DevicesDeviceIdZonesZoneIdWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, deviceId string, zoneId int32, body PatchV2DevicesDeviceIdZonesZoneIdApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV2DevicesDeviceIdZonesZoneIdResponse, error) {
	rsp, err := c.PatchV2DevicesDeviceIdZonesZoneIdWithApplicationJSONPatchPlusJSONBody(ctx, deviceId, zoneId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV2DevicesDeviceIdZonesZoneIdResponse(rsp)
}

// GetV2FirmwareFirmwareTypeIdVersionVersionDownloadWithResponse request returning *GetV2FirmwareFirmwareTypeIdVersionVersionDownloadResponse
func (c *ClientWithResponses) GetV2FirmwareFirmwareTypeIdVersionVersionDownloadWithResponse(ctx context.Context, firmwareTypeId string, version string, reqEditors ...RequestEditorFn) (*GetV2FirmwareFirmwareTypeIdVersionVersionDownloadResponse, error) {
	rsp, err := c.GetV2FirmwareFirmwareTypeIdVersionVersionDownload(ctx, firmwareTypeId, version, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2FirmwareFirmwareTypeIdVersionVersionDownloadResponse(rsp)
}

// GetV2ProtectedPingWithResponse request returning *GetV2ProtectedPingResponse
func (c *ClientWithResponses) GetV2ProtectedPingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV2ProtectedPingResponse, error) {
	rsp, err := c.GetV2ProtectedPing(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2ProtectedPingResponse(rsp)
}

// GetV2SystemsMeWithResponse request returning *GetV2SystemsMeResponse
func (c *ClientWithResponses) GetV2SystemsMeWithResponse(ctx context.Context, params *GetV2SystemsMeParams, reqEditors ...RequestEditorFn) (*GetV2SystemsMeResponse, error) {
	rsp, err := c.GetV2SystemsMe(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2SystemsMeResponse(rsp)
}

// GetV2SystemsSystemIdNotificationsWithResponse request returning *GetV2SystemsSystemIdNotificationsResponse
func (c *ClientWithResponses) GetV2SystemsSystemIdNotificationsWithResponse(ctx context.Context, systemId openapi_types.UUID, params *GetV2SystemsSystemIdNotificationsParams, reqEditors ...RequestEditorFn) (*GetV2SystemsSystemIdNotificationsResponse, error) {
	rsp, err := c.GetV2SystemsSystemIdNotifications(ctx, systemId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2SystemsSystemIdNotificationsResponse(rsp)
}

// GetV2SystemsSystemIdNotificationsActiveWithResponse request returning *GetV2SystemsSystemIdNotificationsActiveResponse
func (c *ClientWithResponses) GetV2SystemsSystemIdNotificationsActiveWithResponse(ctx context.Context, systemId openapi_types.UUID, params *GetV2SystemsSystemIdNotificationsActiveParams, reqEditors ...RequestEditorFn) (*GetV2SystemsSystemIdNotificationsActiveResponse, error) {
	rsp, err := c.GetV2SystemsSystemIdNotificationsActive(ctx, systemId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2SystemsSystemIdNotificationsActiveResponse(rsp)
}

// GetV2SystemsSystemIdSmartHomeModeWithResponse request returning *GetV2SystemsSystemIdSmartHomeModeResponse
func (c *ClientWithResponses) GetV2SystemsSystemIdSmartHomeModeWithResponse(ctx context.Context, systemId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV2SystemsSystemIdSmartHomeModeResponse, error) {
	rsp, err := c.GetV2SystemsSystemIdSmartHomeMode(ctx, systemId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2SystemsSystemIdSmartHomeModeResponse(rsp)
}

// PutV2SystemsSystemIdSmartHomeModeWithBodyWithResponse request with arbitrary body returning *PutV2SystemsSystemIdSmartHomeModeResponse
func (c *ClientWithResponses) PutV2SystemsSystemIdSmartHomeModeWithBodyWithResponse(ctx context.Context, systemId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV2SystemsSystemIdSmartHomeModeResponse, error) {
	rsp, err := c.PutV2SystemsSystemIdSmartHomeModeWithBody(ctx, systemId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV2SystemsSystemIdSmartHomeModeResponse(rsp)
}

func (c *ClientWithResponses) PutV2SystemsSystemIdSmartHomeModeWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, systemId openapi_types.UUID, body PutV2SystemsSystemIdSmartHomeModeApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV2SystemsSystemIdSmartHomeModeResponse, error) {
	rsp, err := c.PutV2SystemsSystemIdSmartHomeModeWithApplicationWildcardPlusJSONBody(ctx, systemId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV2SystemsSystemIdSmartHomeModeResponse(rsp)
}

func (c *ClientWithResponses) PutV2SystemsSystemIdSmartHomeModeWithResponse(ctx context.Context, systemId openapi_types.UUID, body PutV2SystemsSystemIdSmartHomeModeJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV2SystemsSystemIdSmartHomeModeResponse, error) {
	rsp, err := c.PutV2SystemsSystemIdSmartHomeMode(ctx, systemId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV2SystemsSystemIdSmartHomeModeResponse(rsp)
}

func (c *ClientWithResponses) PutV2SystemsSystemIdSmartHomeModeWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, systemId openapi_types.UUID, body PutV2SystemsSystemIdSmartHomeModeApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV2SystemsSystemIdSmartHomeModeResponse, error) {
	rsp, err := c.PutV2SystemsSystemIdSmartHomeModeWithApplicationJSONPatchPlusJSONBody(ctx, systemId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV2SystemsSystemIdSmartHomeModeResponse(rsp)
}

// GetV2SystemsSystemIdSubscriptionsWithResponse request returning *GetV2SystemsSystemIdSubscriptionsResponse
func (c *ClientWithResponses) GetV2SystemsSystemIdSubscriptionsWithResponse(ctx context.Context, systemId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV2SystemsSystemIdSubscriptionsResponse, error) {
	rsp, err := c.GetV2SystemsSystemIdSubscriptions(ctx, systemId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2SystemsSystemIdSubscriptionsResponse(rsp)
}

// GetV3DevicesDeviceIdPointsWithResponse request returning *GetV3DevicesDeviceIdPointsResponse
func (c *ClientWithResponses) GetV3DevicesDeviceIdPointsWithResponse(ctx context.Context, deviceId string, params *GetV3DevicesDeviceIdPointsParams, reqEditors ...RequestEditorFn) (*GetV3DevicesDeviceIdPointsResponse, error) {
	rsp, err := c.GetV3DevicesDeviceIdPoints(ctx, deviceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3DevicesDeviceIdPointsResponse(rsp)
}

// ParseGetWellKnownOpenidConfigurationResponse parses an HTTP response from a GetWellKnownOpenidConfigurationWithResponse call
func ParseGetWellKnownOpenidConfigurationResponse(rsp *http.Response) (*GetWellKnownOpenidConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWellKnownOpenidConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetWellKnownOpenidConfigurationJwksResponse parses an HTTP response from a GetWellKnownOpenidConfigurationJwksWithResponse call
func ParseGetWellKnownOpenidConfigurationJwksResponse(rsp *http.Response) (*GetWellKnownOpenidConfigurationJwksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWellKnownOpenidConfigurationJwksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAssetsIdentityServerAnyResponse parses an HTTP response from a GetAssetsIdentityServerAnyWithResponse call
func ParseGetAssetsIdentityServerAnyResponse(rsp *http.Response) (*GetAssetsIdentityServerAnyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAssetsIdentityServerAnyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetConnectAuthorizeCallbackResponse parses an HTTP response from a GetConnectAuthorizeCallbackWithResponse call
func ParseGetConnectAuthorizeCallbackResponse(rsp *http.Response) (*GetConnectAuthorizeCallbackResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConnectAuthorizeCallbackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetOauthAuthorizeResponse parses an HTTP response from a GetOauthAuthorizeWithResponse call
func ParseGetOauthAuthorizeResponse(rsp *http.Response) (*GetOauthAuthorizeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOauthAuthorizeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostOauthAuthorizeResponse parses an HTTP response from a PostOauthAuthorizeWithResponse call
func ParsePostOauthAuthorizeResponse(rsp *http.Response) (*PostOauthAuthorizeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOauthAuthorizeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetOauthConsentResponse parses an HTTP response from a GetOauthConsentWithResponse call
func ParseGetOauthConsentResponse(rsp *http.Response) (*GetOauthConsentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOauthConsentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostOauthConsentResponse parses an HTTP response from a PostOauthConsentWithResponse call
func ParsePostOauthConsentResponse(rsp *http.Response) (*PostOauthConsentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOauthConsentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetOauthErrorResponse parses an HTTP response from a GetOauthErrorWithResponse call
func ParseGetOauthErrorResponse(rsp *http.Response) (*GetOauthErrorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOauthErrorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetOauthLoginResponse parses an HTTP response from a GetOauthLoginWithResponse call
func ParseGetOauthLoginResponse(rsp *http.Response) (*GetOauthLoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOauthLoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostOauthLoginResponse parses an HTTP response from a PostOauthLoginWithResponse call
func ParsePostOauthLoginResponse(rsp *http.Response) (*PostOauthLoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOauthLoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostOauthTokenResponse parses an HTTP response from a PostOauthTokenWithResponse call
func ParsePostOauthTokenResponse(rsp *http.Response) (*PostOauthTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOauthTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV2BrandsBrandIdFirmwareFirmwareTypeIdVersionVersionDownloadResponse parses an HTTP response from a GetV2BrandsBrandIdFirmwareFirmwareTypeIdVersionVersionDownloadWithResponse call
func ParseGetV2BrandsBrandIdFirmwareFirmwareTypeIdVersionVersionDownloadResponse(rsp *http.Response) (*GetV2BrandsBrandIdFirmwareFirmwareTypeIdVersionVersionDownloadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2BrandsBrandIdFirmwareFirmwareTypeIdVersionVersionDownloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest openapi_types.File
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetV2DevicesDeviceIdResponse parses an HTTP response from a GetV2DevicesDeviceIdWithResponse call
func ParseGetV2DevicesDeviceIdResponse(rsp *http.Response) (*GetV2DevicesDeviceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2DevicesDeviceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetV2DevicesDeviceIdAidModeResponse parses an HTTP response from a GetV2DevicesDeviceIdAidModeWithResponse call
func ParseGetV2DevicesDeviceIdAidModeResponse(rsp *http.Response) (*GetV2DevicesDeviceIdAidModeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2DevicesDeviceIdAidModeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AidModeResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetV2DevicesDeviceIdFirmwareInfoResponse parses an HTTP response from a GetV2DevicesDeviceIdFirmwareInfoWithResponse call
func ParseGetV2DevicesDeviceIdFirmwareInfoResponse(rsp *http.Response) (*GetV2DevicesDeviceIdFirmwareInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2DevicesDeviceIdFirmwareInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceFirmwareInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetV2DevicesDeviceIdPointsResponse parses an HTTP response from a GetV2DevicesDeviceIdPointsWithResponse call
func ParseGetV2DevicesDeviceIdPointsResponse(rsp *http.Response) (*GetV2DevicesDeviceIdPointsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2DevicesDeviceIdPointsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ParameterData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePatchV2DevicesDeviceIdPointsResponse parses an HTTP response from a PatchV2DevicesDeviceIdPointsWithResponse call
func ParsePatchV2DevicesDeviceIdPointsResponse(rsp *http.Response) (*PatchV2DevicesDeviceIdPointsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV2DevicesDeviceIdPointsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CloudToDeviceMethodResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetV2DevicesDeviceIdSmartHomeCategoriesResponse parses an HTTP response from a GetV2DevicesDeviceIdSmartHomeCategoriesWithResponse call
func ParseGetV2DevicesDeviceIdSmartHomeCategoriesResponse(rsp *http.Response) (*GetV2DevicesDeviceIdSmartHomeCategoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2DevicesDeviceIdSmartHomeCategoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			ShElectricPowerUsedCurrently   *bool `json:"sh-electricPowerUsedCurrently,omitempty"`
			ShElectricalPriceMode          *bool `json:"sh-electricalPriceMode,omitempty"`
			ShElectricalPriceModeDuration  *bool `json:"sh-electricalPriceModeDuration,omitempty"`
			ShEnergyMetered                *bool `json:"sh-energyMetered,omitempty"`
			ShFanMode                      *bool `json:"sh-fanMode,omitempty"`
			ShFanStatus                    *bool `json:"sh-fanStatus,omitempty"`
			ShHwBoost                      *bool `json:"sh-hwBoost,omitempty"`
			ShHwMode                       *bool `json:"sh-hwMode,omitempty"`
			ShHwTemp                       *bool `json:"sh-hwTemp,omitempty"`
			ShIndoorCO2                    *bool `json:"sh-indoorCO2,omitempty"`
			ShIndoorCO2Sp                  *bool `json:"sh-indoorCO2Sp,omitempty"`
			ShIndoorDeHumiditySp           *bool `json:"sh-indoorDeHumiditySp,omitempty"`
			ShIndoorHumidity               *bool `json:"sh-indoorHumidity,omitempty"`
			ShIndoorHumidityMode           *bool `json:"sh-indoorHumidityMode,omitempty"`
			ShIndoorHumiditySp             *bool `json:"sh-indoorHumiditySp,omitempty"`
			ShIndoorSpCool                 *bool `json:"sh-indoorSpCool,omitempty"`
			ShIndoorSpHeat                 *bool `json:"sh-indoorSpHeat,omitempty"`
			ShIndoorSpOffsCool             *bool `json:"sh-indoorSpOffsCool,omitempty"`
			ShIndoorSpOffsHeat             *bool `json:"sh-indoorSpOffsHeat,omitempty"`
			ShIndoorTemp                   *bool `json:"sh-indoorTemp,omitempty"`
			ShOutdoorTemp                  *bool `json:"sh-outdoorTemp,omitempty"`
			ShPoolSp                       *bool `json:"sh-poolSp,omitempty"`
			ShPoolTemp                     *bool `json:"sh-poolTemp,omitempty"`
			ShReturnTemp                   *bool `json:"sh-returnTemp,omitempty"`
			ShSmartMode                    *bool `json:"sh-smartMode,omitempty"`
			ShSolarEnergyProducedDay       *bool `json:"sh-solarEnergyProducedDay,omitempty"`
			ShSolarEnergyProducedMonth     *bool `json:"sh-solarEnergyProducedMonth,omitempty"`
			ShSolarEnergyProducedTotal     *bool `json:"sh-solarEnergyProducedTotal,omitempty"`
			ShSolarEnergyProducedWeek      *bool `json:"sh-solarEnergyProducedWeek,omitempty"`
			ShSolarEnergyProducedYear      *bool `json:"sh-solarEnergyProducedYear,omitempty"`
			ShSolarPowerAvailableCurrently *bool `json:"sh-solarPowerAvailableCurrently,omitempty"`
			ShSupplyTemp                   *bool `json:"sh-supplyTemp,omitempty"`
			ShVentBoost                    *bool `json:"sh-ventBoost,omitempty"`
			ShVentMode                     *bool `json:"sh-ventMode,omitempty"`
			ShZoneMode                     *bool `json:"sh-zoneMode,omitempty"`
			ShZones                        *bool `json:"sh-zones,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetV2DevicesDeviceIdSmartHomeZonesResponse parses an HTTP response from a GetV2DevicesDeviceIdSmartHomeZonesWithResponse call
func ParseGetV2DevicesDeviceIdSmartHomeZonesResponse(rsp *http.Response) (*GetV2DevicesDeviceIdSmartHomeZonesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2DevicesDeviceIdSmartHomeZonesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ZoneResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePatchV2DevicesDeviceIdZonesZoneIdResponse parses an HTTP response from a PatchV2DevicesDeviceIdZonesZoneIdWithResponse call
func ParsePatchV2DevicesDeviceIdZonesZoneIdResponse(rsp *http.Response) (*PatchV2DevicesDeviceIdZonesZoneIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV2DevicesDeviceIdZonesZoneIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetV2FirmwareFirmwareTypeIdVersionVersionDownloadResponse parses an HTTP response from a GetV2FirmwareFirmwareTypeIdVersionVersionDownloadWithResponse call
func ParseGetV2FirmwareFirmwareTypeIdVersionVersionDownloadResponse(rsp *http.Response) (*GetV2FirmwareFirmwareTypeIdVersionVersionDownloadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2FirmwareFirmwareTypeIdVersionVersionDownloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest openapi_types.File
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetV2ProtectedPingResponse parses an HTTP response from a GetV2ProtectedPingWithResponse call
func ParseGetV2ProtectedPingResponse(rsp *http.Response) (*GetV2ProtectedPingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2ProtectedPingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV2SystemsMeResponse parses an HTTP response from a GetV2SystemsMeWithResponse call
func ParseGetV2SystemsMeResponse(rsp *http.Response) (*GetV2SystemsMeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2SystemsMeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PagedSystemResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetV2SystemsSystemIdNotificationsResponse parses an HTTP response from a GetV2SystemsSystemIdNotificationsWithResponse call
func ParseGetV2SystemsSystemIdNotificationsResponse(rsp *http.Response) (*GetV2SystemsSystemIdNotificationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2SystemsSystemIdNotificationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlarmsPaged
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetV2SystemsSystemIdNotificationsActiveResponse parses an HTTP response from a GetV2SystemsSystemIdNotificationsActiveWithResponse call
func ParseGetV2SystemsSystemIdNotificationsActiveResponse(rsp *http.Response) (*GetV2SystemsSystemIdNotificationsActiveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2SystemsSystemIdNotificationsActiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlarmsPaged
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetV2SystemsSystemIdSmartHomeModeResponse parses an HTTP response from a GetV2SystemsSystemIdSmartHomeModeWithResponse call
func ParseGetV2SystemsSystemIdSmartHomeModeResponse(rsp *http.Response) (*GetV2SystemsSystemIdSmartHomeModeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2SystemsSystemIdSmartHomeModeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SmartHomeModeModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutV2SystemsSystemIdSmartHomeModeResponse parses an HTTP response from a PutV2SystemsSystemIdSmartHomeModeWithResponse call
func ParsePutV2SystemsSystemIdSmartHomeModeResponse(rsp *http.Response) (*PutV2SystemsSystemIdSmartHomeModeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV2SystemsSystemIdSmartHomeModeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV2SystemsSystemIdSubscriptionsResponse parses an HTTP response from a GetV2SystemsSystemIdSubscriptionsWithResponse call
func ParseGetV2SystemsSystemIdSubscriptionsResponse(rsp *http.Response) (*GetV2SystemsSystemIdSubscriptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2SystemsSystemIdSubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DevicePremiumResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetV3DevicesDeviceIdPointsResponse parses an HTTP response from a GetV3DevicesDeviceIdPointsWithResponse call
func ParseGetV3DevicesDeviceIdPointsResponse(rsp *http.Response) (*GetV3DevicesDeviceIdPointsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3DevicesDeviceIdPointsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ParameterData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
