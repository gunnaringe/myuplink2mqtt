// Package main provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package myuplink

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
)

const (
	Client_CredentialsScopes = "Client_Credentials.Scopes"
)

// Defines values for AidMode.
const (
	AidModeN0 AidMode = 0
	AidModeN1 AidMode = 1
)

// Defines values for DeviceConnectionState.
const (
	DeviceConnectionStateN0 DeviceConnectionState = 0
	DeviceConnectionStateN1 DeviceConnectionState = 1
)

// Defines values for PremiumFeatures.
const (
	History      PremiumFeatures = "history"
	Manage       PremiumFeatures = "manage"
	Organization PremiumFeatures = "organization"
)

// Defines values for SecurityLevel.
const (
	Admin   SecurityLevel = "admin"
	Manager SecurityLevel = "manager"
	Viewer  SecurityLevel = "viewer"
)

// Defines values for SmartMode.
const (
	Away     SmartMode = "Away"
	Default  SmartMode = "Default"
	Home     SmartMode = "Home"
	Normal   SmartMode = "Normal"
	Vacation SmartMode = "Vacation"
)

// Defines values for Status.
const (
	Active               Status = "Active"
	DismissedByDevice    Status = "DismissedByDevice"
	None                 Status = "None"
	ResetByUserFromCloud Status = "ResetByUserFromCloud"
	ResetByUserOnDevice  Status = "ResetByUserOnDevice"
	Unknown              Status = "Unknown"
)

// AidMode defines model for AidMode.
type AidMode int32

// AidModeResponseModel defines model for AidModeResponseModel.
type AidModeResponseModel struct {
	AidMode *AidMode `json:"aidMode,omitempty"`
}

// Alarm.
type Alarm struct {
	// The companyÂ´s id of the alarm.
	AlarmNumber *int32 `json:"alarmNumber,omitempty"`

	// Date of the creation.
	CreatedDatetime *string `json:"createdDatetime"`

	// Localized alarm description.
	Description *string `json:"description"`

	// The device which the alarm belongs to.
	DeviceId *string `json:"deviceId"`

	// The name of the equipment.
	EquipName *string `json:"equipName"`

	// Localized alarm title.
	Header *string `json:"header"`

	// The id of the alarm stored in the database.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Determines the severity of the alarm,
	// 1 being the most severe.
	Severity *int32  `json:"severity,omitempty"`
	Status   *Status `json:"status,omitempty"`

	// Status history.
	StatusHistory *[]AlarmStatus `json:"statusHistory"`
}

// AlarmStatus defines model for AlarmStatus.
type AlarmStatus struct {
	// Date of the alarm.
	Datetime *int32  `json:"datetime,omitempty"`
	Status   *Status `json:"status,omitempty"`
}

// Alarms paged.
type AlarmsPaged struct {
	// Items per page.
	ItemsPerPage *int32 `json:"itemsPerPage,omitempty"`

	// Notifications.
	Notifications *[]Alarm `json:"notifications"`

	// Num items.
	NumItems *int32 `json:"numItems,omitempty"`

	// Page.
	Page *int32 `json:"page,omitempty"`
}

// Represents the Device Method Invocation Results.
type CloudToDeviceMethodResult struct {
	Payload *interface{} `json:"payload,omitempty"`

	// Gets or sets the status of device method invocation.
	Status *int32 `json:"status,omitempty"`
}

// Specifies the different connection states of a device.
// 0 - Disconnected
// 1 - Connected
type DeviceConnectionState int32

// DevicePremiumResponse defines model for DevicePremiumResponse.
type DevicePremiumResponse struct {
	Subscriptions *[]PremiumFeatureResponseModel `json:"subscriptions"`
}

// DeviceResponseModel.
type DeviceResponseModel struct {
	// Available features.
	AvailableFeatures *[]string `json:"availableFeatures"`

	// Specifies the different connection states of a device.
	// 0 - Disconnected
	// 1 - Connected
	ConnectionState *DeviceConnectionState `json:"connectionState,omitempty"`

	// Firmware response model
	Firmware *FirmwareResponseModel `json:"firmware,omitempty"`

	// Id.
	Id *string `json:"id"`

	// ProductResponseModel
	Product *ProductResponseModel `json:"product,omitempty"`
}

// EnumValues defines model for EnumValues.
type EnumValues struct {
	// The EnumIcon of the Enum.
	Icon *string `json:"icon"`

	// The EnumText of the Enum.
	Text *string `json:"text"`

	// The EnumValue of the Enum.
	Value *string `json:"value"`
}

// FirmwareResponse defines model for FirmwareResponse.
type FirmwareResponse struct {
	Created *time.Time `json:"created,omitempty"`
	Version *string    `json:"version"`
}

// Firmware response model
type FirmwareResponseModel struct {
	// Current Firmware Version
	CurrentFwVersion *string `json:"currentFwVersion"`

	// Desired Firmware Version
	DesiredFwVersion *string `json:"desiredFwVersion"`
}

// Group list.
type PagedSystemResult struct {
	// Connection state.
	ItemsPerPage *int32 `json:"itemsPerPage,omitempty"`

	// Firmware.
	NumItems *int32 `json:"numItems,omitempty"`

	// Id.
	Page *int32 `json:"page,omitempty"`

	// Groups.
	Systems *[]SystemWithDevices `json:"systems"`
}

// Grouped parameter value.
type ParameterData struct {
	// Category.
	Category *string `json:"category"`

	// Parameter enum values.
	EnumValues *[]EnumValues `json:"enumValues"`

	// Parameter max value.
	MaxValue *int32 `json:"maxValue"`

	// Parameter min value.
	MinValue *int32 `json:"minValue"`

	// Parameter id.
	ParameterId *string `json:"parameterId"`

	// Parameter name.
	ParameterName *string `json:"parameterName"`

	// Parameter unit.
	ParameterUnit *string `json:"parameterUnit"`

	// Parameter scale value.
	ScaleValue *string `json:"scaleValue"`

	// Parameter Smart home categories.
	SmartHomeCategories *[]string `json:"smartHomeCategories"`

	// String value property.
	StrVal *string `json:"strVal"`

	// Timestamp property.
	Timestamp *time.Time `json:"timestamp,omitempty"`

	// Value property.
	Value *float64 `json:"value"`

	// Defines if parameter could be changed.
	Writable *bool `json:"writable,omitempty"`

	// Reference to a ShZone entity.
	ZoneId *string `json:"zoneId"`
}

// PremiumFeatureResponseModel defines model for PremiumFeatureResponseModel.
type PremiumFeatureResponseModel struct {
	// Premium features enum.
	Type       *PremiumFeatures `json:"type,omitempty"`
	ValidUntil *time.Time       `json:"validUntil"`
}

// Premium features enum.
type PremiumFeatures string

// Product model.
type Product struct {
	// Name.
	Name *string `json:"name"`

	// Serial number.
	SerialNumber *string `json:"serialNumber"`
}

// ProductResponseModel
type ProductResponseModel struct {
	// Name
	Name *string `json:"name"`

	// SerialNumber
	SerialNumber *string `json:"serialNumber"`
}

// SecurityLevel defines model for SecurityLevel.
type SecurityLevel string

// SmartHomeModeModel defines model for SmartHomeModeModel.
type SmartHomeModeModel struct {
	// Smart mode enum.
	SmartHomeMode *SmartMode `json:"smartHomeMode,omitempty"`
}

// Smart mode enum.
type SmartMode string

// Status defines model for Status.
type Status string

// Device model.
type SystemDevice struct {
	// Specifies the different connection states of a device.
	// 0 - Disconnected
	// 1 - Connected
	ConnectionState *DeviceConnectionState `json:"connectionState,omitempty"`

	// Current firmware version.
	CurrentFwVersion *string `json:"currentFwVersion"`

	// Id.
	Id *string `json:"id"`

	// Product model.
	Product *Product `json:"product,omitempty"`
}

// Group.
type SystemWithDevices struct {
	// System country.
	Country *string `json:"country"`

	// List of devices.
	Devices *[]SystemDevice `json:"devices"`

	// Whether system currently has an active alarm.
	HasAlarm *bool `json:"hasAlarm,omitempty"`

	// System name.
	Name          *string        `json:"name"`
	SecurityLevel *SecurityLevel `json:"securityLevel,omitempty"`

	// System identifier.
	SystemId *string `json:"systemId"`
}

// ZonePatchRequest defines model for ZonePatchRequest.
type ZonePatchRequest struct {
	Mode         *string  `json:"mode"`
	SetpointCool *float64 `json:"setpointCool"`
	SetpointHeat *float64 `json:"setpointHeat"`
}

// ZoneResponse defines model for ZoneResponse.
type ZoneResponse struct {
	// If true, zone is command-only and no temperature readings
	// are available. Setpoint will be an unspecified value
	// (not degrees).
	CommandOnly *bool `json:"commandOnly,omitempty"`

	// Indoor CO2 levels (0-40000ppm)
	IndoorCo2 *int32 `json:"indoorCo2"`

	// Indoor humidity (0-100%RH)
	IndoorHumidity *float64 `json:"indoorHumidity"`

	// Specified temperature unit in haystack.
	// If "isCelsius" is false then all temperatures are in Fahrenheit. Otherwies it is in Celsius.
	IsCelsius *bool `json:"isCelsius,omitempty"`

	// Sh-zone's current mode.
	Mode *string `json:"mode"`

	// sh-zone's parameter name.
	Name *string `json:"name"`

	// Target temperature in target unit.
	Setpoint *float64 `json:"setpoint"`

	// Cooling setpoint current value.
	SetpointCool *float64 `json:"setpointCool"`

	// Heating setpoint current value.
	SetpointHeat *float64 `json:"setpointHeat"`

	// Maximum temperature range.
	SetpointRangeMax *int32 `json:"setpointRangeMax"`

	// Minimum temperature range.
	SetpointRangeMin *int32 `json:"setpointRangeMin"`

	// sh-zone's supported modes.
	SupportedModes *string `json:"supportedModes"`

	// Current temperature in target unit.
	Temperature *float64 `json:"temperature"`

	// sh-zone's parameter id.
	ZoneId *string `json:"zoneId"`
}

// GetV2DevicesDeviceIdPointsParams defines parameters for GetV2DevicesDeviceIdPoints.
type GetV2DevicesDeviceIdPointsParams struct {
	// Parameter ids separated by comma. Optional parameter:
	// If Parameter Ids are not defined, then all device's parameters will be listed.
	Parameters *string `form:"parameters,omitempty" json:"parameters,omitempty"`

	// Language (e.g. en-GB).
	AcceptLanguage *string `json:"Accept-Language,omitempty"`
}

// PatchV2DevicesDeviceIdPointsJSONBody defines parameters for PatchV2DevicesDeviceIdPoints.
type PatchV2DevicesDeviceIdPointsJSONBody struct {
	AdditionalProperties map[string]string `json:"-"`
}

// GetV2DevicesDeviceIdSmartHomeZonesParams defines parameters for GetV2DevicesDeviceIdSmartHomeZones.
type GetV2DevicesDeviceIdSmartHomeZonesParams struct {
	// Language (e.g. en-GB).
	AcceptLanguage *string `json:"Accept-Language,omitempty"`
}

// PatchV2DevicesDeviceIdZonesZoneIdJSONBody defines parameters for PatchV2DevicesDeviceIdZonesZoneId.
type PatchV2DevicesDeviceIdZonesZoneIdJSONBody = ZonePatchRequest

// GetV2SystemsMeParams defines parameters for GetV2SystemsMe.
type GetV2SystemsMeParams struct {
	// User Id. (Optional)
	Sub *string `form:"sub,omitempty" json:"sub,omitempty"`

	// Page.
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// Items per page.
	ItemsPerPage *int32 `form:"itemsPerPage,omitempty" json:"itemsPerPage,omitempty"`
}

// GetV2SystemsSystemIdNotificationsParams defines parameters for GetV2SystemsSystemIdNotifications.
type GetV2SystemsSystemIdNotificationsParams struct {
	// Page number. Optional, defaults to 1.
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// Maximum number of results to be returned. Optional, defaults to 10.
	ItemsPerPage *int32 `form:"itemsPerPage,omitempty" json:"itemsPerPage,omitempty"`

	// Language (e.g. en-GB).
	AcceptLanguage *string `json:"Accept-Language,omitempty"`
}

// GetV2SystemsSystemIdNotificationsActiveParams defines parameters for GetV2SystemsSystemIdNotificationsActive.
type GetV2SystemsSystemIdNotificationsActiveParams struct {
	// Page number. Optional, defaults to 1.
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// Maximum number of results to be returned. Optional, defaults to 10.
	ItemsPerPage *int32 `form:"itemsPerPage,omitempty" json:"itemsPerPage,omitempty"`

	// Language (e.g. en-GB).
	AcceptLanguage *string `json:"Accept-Language,omitempty"`
}

// PutV2SystemsSystemIdSmartHomeModeJSONBody defines parameters for PutV2SystemsSystemIdSmartHomeMode.
type PutV2SystemsSystemIdSmartHomeModeJSONBody = SmartHomeModeModel

// PatchV2DevicesDeviceIdPointsJSONRequestBody defines body for PatchV2DevicesDeviceIdPoints for application/json ContentType.
type PatchV2DevicesDeviceIdPointsJSONRequestBody PatchV2DevicesDeviceIdPointsJSONBody

// PatchV2DevicesDeviceIdZonesZoneIdJSONRequestBody defines body for PatchV2DevicesDeviceIdZonesZoneId for application/json ContentType.
type PatchV2DevicesDeviceIdZonesZoneIdJSONRequestBody = PatchV2DevicesDeviceIdZonesZoneIdJSONBody

// PutV2SystemsSystemIdSmartHomeModeJSONRequestBody defines body for PutV2SystemsSystemIdSmartHomeMode for application/json ContentType.
type PutV2SystemsSystemIdSmartHomeModeJSONRequestBody = PutV2SystemsSystemIdSmartHomeModeJSONBody

// Getter for additional properties for PatchV2DevicesDeviceIdPointsJSONBody. Returns the specified
// element and whether it was found
func (a PatchV2DevicesDeviceIdPointsJSONBody) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PatchV2DevicesDeviceIdPointsJSONBody
func (a *PatchV2DevicesDeviceIdPointsJSONBody) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PatchV2DevicesDeviceIdPointsJSONBody to handle AdditionalProperties
func (a *PatchV2DevicesDeviceIdPointsJSONBody) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PatchV2DevicesDeviceIdPointsJSONBody to handle AdditionalProperties
func (a PatchV2DevicesDeviceIdPointsJSONBody) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetWellKnownOpenidConfiguration request
	GetWellKnownOpenidConfiguration(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWellKnownOpenidConfigurationJwks request
	GetWellKnownOpenidConfigurationJwks(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAssetsIdentityServerAny request
	GetAssetsIdentityServerAny(ctx context.Context, any string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConnectAuthorizeCallback request
	GetConnectAuthorizeCallback(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOauthAuthorize request
	GetOauthAuthorize(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOauthAuthorize request
	PostOauthAuthorize(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOauthConsent request
	GetOauthConsent(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOauthConsent request
	PostOauthConsent(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOauthError request
	GetOauthError(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOauthLogin request
	GetOauthLogin(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOauthLogin request
	PostOauthLogin(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOauthToken request
	PostOauthToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2DevicesDeviceId request
	GetV2DevicesDeviceId(ctx context.Context, deviceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2DevicesDeviceIdAidMode request
	GetV2DevicesDeviceIdAidMode(ctx context.Context, deviceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2DevicesDeviceIdFirmware request
	GetV2DevicesDeviceIdFirmware(ctx context.Context, deviceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2DevicesDeviceIdPoints request
	GetV2DevicesDeviceIdPoints(ctx context.Context, deviceId string, params *GetV2DevicesDeviceIdPointsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV2DevicesDeviceIdPoints request with any body
	PatchV2DevicesDeviceIdPointsWithBody(ctx context.Context, deviceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV2DevicesDeviceIdPoints(ctx context.Context, deviceId string, body PatchV2DevicesDeviceIdPointsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2DevicesDeviceIdSmartHomeCategories request
	GetV2DevicesDeviceIdSmartHomeCategories(ctx context.Context, deviceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2DevicesDeviceIdSmartHomeZones request
	GetV2DevicesDeviceIdSmartHomeZones(ctx context.Context, deviceId string, params *GetV2DevicesDeviceIdSmartHomeZonesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV2DevicesDeviceIdZonesZoneId request with any body
	PatchV2DevicesDeviceIdZonesZoneIdWithBody(ctx context.Context, deviceId string, zoneId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV2DevicesDeviceIdZonesZoneId(ctx context.Context, deviceId string, zoneId int32, body PatchV2DevicesDeviceIdZonesZoneIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2FirmwareFirmwareTypeIdVersionVersionDownload request
	GetV2FirmwareFirmwareTypeIdVersionVersionDownload(ctx context.Context, firmwareTypeId string, version string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2ProtectedPing request
	GetV2ProtectedPing(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2SystemsMe request
	GetV2SystemsMe(ctx context.Context, params *GetV2SystemsMeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2SystemsSystemIdNotifications request
	GetV2SystemsSystemIdNotifications(ctx context.Context, systemId string, params *GetV2SystemsSystemIdNotificationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2SystemsSystemIdNotificationsActive request
	GetV2SystemsSystemIdNotificationsActive(ctx context.Context, systemId string, params *GetV2SystemsSystemIdNotificationsActiveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2SystemsSystemIdSmartHomeMode request
	GetV2SystemsSystemIdSmartHomeMode(ctx context.Context, systemId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV2SystemsSystemIdSmartHomeMode request with any body
	PutV2SystemsSystemIdSmartHomeModeWithBody(ctx context.Context, systemId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV2SystemsSystemIdSmartHomeMode(ctx context.Context, systemId string, body PutV2SystemsSystemIdSmartHomeModeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2SystemsSystemIdSubscriptions request
	GetV2SystemsSystemIdSubscriptions(ctx context.Context, systemId string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetWellKnownOpenidConfiguration(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWellKnownOpenidConfigurationRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWellKnownOpenidConfigurationJwks(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWellKnownOpenidConfigurationJwksRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAssetsIdentityServerAny(ctx context.Context, any string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAssetsIdentityServerAnyRequest(c.Server, any)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConnectAuthorizeCallback(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConnectAuthorizeCallbackRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOauthAuthorize(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOauthAuthorizeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOauthAuthorize(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOauthAuthorizeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOauthConsent(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOauthConsentRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOauthConsent(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOauthConsentRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOauthError(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOauthErrorRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOauthLogin(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOauthLoginRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOauthLogin(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOauthLoginRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOauthToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOauthTokenRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2DevicesDeviceId(ctx context.Context, deviceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2DevicesDeviceIdRequest(c.Server, deviceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2DevicesDeviceIdAidMode(ctx context.Context, deviceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2DevicesDeviceIdAidModeRequest(c.Server, deviceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2DevicesDeviceIdFirmware(ctx context.Context, deviceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2DevicesDeviceIdFirmwareRequest(c.Server, deviceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2DevicesDeviceIdPoints(ctx context.Context, deviceId string, params *GetV2DevicesDeviceIdPointsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2DevicesDeviceIdPointsRequest(c.Server, deviceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV2DevicesDeviceIdPointsWithBody(ctx context.Context, deviceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV2DevicesDeviceIdPointsRequestWithBody(c.Server, deviceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV2DevicesDeviceIdPoints(ctx context.Context, deviceId string, body PatchV2DevicesDeviceIdPointsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV2DevicesDeviceIdPointsRequest(c.Server, deviceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2DevicesDeviceIdSmartHomeCategories(ctx context.Context, deviceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2DevicesDeviceIdSmartHomeCategoriesRequest(c.Server, deviceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2DevicesDeviceIdSmartHomeZones(ctx context.Context, deviceId string, params *GetV2DevicesDeviceIdSmartHomeZonesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2DevicesDeviceIdSmartHomeZonesRequest(c.Server, deviceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV2DevicesDeviceIdZonesZoneIdWithBody(ctx context.Context, deviceId string, zoneId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV2DevicesDeviceIdZonesZoneIdRequestWithBody(c.Server, deviceId, zoneId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV2DevicesDeviceIdZonesZoneId(ctx context.Context, deviceId string, zoneId int32, body PatchV2DevicesDeviceIdZonesZoneIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV2DevicesDeviceIdZonesZoneIdRequest(c.Server, deviceId, zoneId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2FirmwareFirmwareTypeIdVersionVersionDownload(ctx context.Context, firmwareTypeId string, version string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2FirmwareFirmwareTypeIdVersionVersionDownloadRequest(c.Server, firmwareTypeId, version)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2ProtectedPing(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2ProtectedPingRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2SystemsMe(ctx context.Context, params *GetV2SystemsMeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2SystemsMeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2SystemsSystemIdNotifications(ctx context.Context, systemId string, params *GetV2SystemsSystemIdNotificationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2SystemsSystemIdNotificationsRequest(c.Server, systemId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2SystemsSystemIdNotificationsActive(ctx context.Context, systemId string, params *GetV2SystemsSystemIdNotificationsActiveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2SystemsSystemIdNotificationsActiveRequest(c.Server, systemId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2SystemsSystemIdSmartHomeMode(ctx context.Context, systemId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2SystemsSystemIdSmartHomeModeRequest(c.Server, systemId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV2SystemsSystemIdSmartHomeModeWithBody(ctx context.Context, systemId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV2SystemsSystemIdSmartHomeModeRequestWithBody(c.Server, systemId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV2SystemsSystemIdSmartHomeMode(ctx context.Context, systemId string, body PutV2SystemsSystemIdSmartHomeModeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV2SystemsSystemIdSmartHomeModeRequest(c.Server, systemId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2SystemsSystemIdSubscriptions(ctx context.Context, systemId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2SystemsSystemIdSubscriptionsRequest(c.Server, systemId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetWellKnownOpenidConfigurationRequest generates requests for GetWellKnownOpenidConfiguration
func NewGetWellKnownOpenidConfigurationRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/.well-known/openid-configuration")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWellKnownOpenidConfigurationJwksRequest generates requests for GetWellKnownOpenidConfigurationJwks
func NewGetWellKnownOpenidConfigurationJwksRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/.well-known/openid-configuration/jwks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAssetsIdentityServerAnyRequest generates requests for GetAssetsIdentityServerAny
func NewGetAssetsIdentityServerAnyRequest(server string, any string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "any", runtime.ParamLocationPath, any)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/assets/identity-server/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetConnectAuthorizeCallbackRequest generates requests for GetConnectAuthorizeCallback
func NewGetConnectAuthorizeCallbackRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/connect/authorize/callback")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOauthAuthorizeRequest generates requests for GetOauthAuthorize
func NewGetOauthAuthorizeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/authorize")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOauthAuthorizeRequest generates requests for PostOauthAuthorize
func NewPostOauthAuthorizeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/authorize")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOauthConsentRequest generates requests for GetOauthConsent
func NewGetOauthConsentRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/consent")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOauthConsentRequest generates requests for PostOauthConsent
func NewPostOauthConsentRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/consent")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOauthErrorRequest generates requests for GetOauthError
func NewGetOauthErrorRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/error")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOauthLoginRequest generates requests for GetOauthLogin
func NewGetOauthLoginRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOauthLoginRequest generates requests for PostOauthLogin
func NewPostOauthLoginRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOauthTokenRequest generates requests for PostOauthToken
func NewPostOauthTokenRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/token")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2DevicesDeviceIdRequest generates requests for GetV2DevicesDeviceId
func NewGetV2DevicesDeviceIdRequest(server string, deviceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deviceId", runtime.ParamLocationPath, deviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/devices/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2DevicesDeviceIdAidModeRequest generates requests for GetV2DevicesDeviceIdAidMode
func NewGetV2DevicesDeviceIdAidModeRequest(server string, deviceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deviceId", runtime.ParamLocationPath, deviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/devices/%s/aidMode", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2DevicesDeviceIdFirmwareRequest generates requests for GetV2DevicesDeviceIdFirmware
func NewGetV2DevicesDeviceIdFirmwareRequest(server string, deviceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deviceId", runtime.ParamLocationPath, deviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/devices/%s/firmware", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2DevicesDeviceIdPointsRequest generates requests for GetV2DevicesDeviceIdPoints
func NewGetV2DevicesDeviceIdPointsRequest(server string, deviceId string, params *GetV2DevicesDeviceIdPointsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deviceId", runtime.ParamLocationPath, deviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/devices/%s/points", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Parameters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parameters", runtime.ParamLocationQuery, *params.Parameters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params.AcceptLanguage != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Accept-Language", headerParam0)
	}

	return req, nil
}

// NewPatchV2DevicesDeviceIdPointsRequest calls the generic PatchV2DevicesDeviceIdPoints builder with application/json body
func NewPatchV2DevicesDeviceIdPointsRequest(server string, deviceId string, body PatchV2DevicesDeviceIdPointsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV2DevicesDeviceIdPointsRequestWithBody(server, deviceId, "application/json", bodyReader)
}

// NewPatchV2DevicesDeviceIdPointsRequestWithBody generates requests for PatchV2DevicesDeviceIdPoints with any type of body
func NewPatchV2DevicesDeviceIdPointsRequestWithBody(server string, deviceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deviceId", runtime.ParamLocationPath, deviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/devices/%s/points", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV2DevicesDeviceIdSmartHomeCategoriesRequest generates requests for GetV2DevicesDeviceIdSmartHomeCategories
func NewGetV2DevicesDeviceIdSmartHomeCategoriesRequest(server string, deviceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deviceId", runtime.ParamLocationPath, deviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/devices/%s/smart-home-categories", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2DevicesDeviceIdSmartHomeZonesRequest generates requests for GetV2DevicesDeviceIdSmartHomeZones
func NewGetV2DevicesDeviceIdSmartHomeZonesRequest(server string, deviceId string, params *GetV2DevicesDeviceIdSmartHomeZonesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deviceId", runtime.ParamLocationPath, deviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/devices/%s/smart-home-zones", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params.AcceptLanguage != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Accept-Language", headerParam0)
	}

	return req, nil
}

// NewPatchV2DevicesDeviceIdZonesZoneIdRequest calls the generic PatchV2DevicesDeviceIdZonesZoneId builder with application/json body
func NewPatchV2DevicesDeviceIdZonesZoneIdRequest(server string, deviceId string, zoneId int32, body PatchV2DevicesDeviceIdZonesZoneIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV2DevicesDeviceIdZonesZoneIdRequestWithBody(server, deviceId, zoneId, "application/json", bodyReader)
}

// NewPatchV2DevicesDeviceIdZonesZoneIdRequestWithBody generates requests for PatchV2DevicesDeviceIdZonesZoneId with any type of body
func NewPatchV2DevicesDeviceIdZonesZoneIdRequestWithBody(server string, deviceId string, zoneId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deviceId", runtime.ParamLocationPath, deviceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, zoneId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/devices/%s/zones/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV2FirmwareFirmwareTypeIdVersionVersionDownloadRequest generates requests for GetV2FirmwareFirmwareTypeIdVersionVersionDownload
func NewGetV2FirmwareFirmwareTypeIdVersionVersionDownloadRequest(server string, firmwareTypeId string, version string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "firmwareTypeId", runtime.ParamLocationPath, firmwareTypeId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/firmware/%s/version/%s/download", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2ProtectedPingRequest generates requests for GetV2ProtectedPing
func NewGetV2ProtectedPingRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/protected-ping")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2SystemsMeRequest generates requests for GetV2SystemsMe
func NewGetV2SystemsMeRequest(server string, params *GetV2SystemsMeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/systems/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Sub != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sub", runtime.ParamLocationQuery, *params.Sub); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ItemsPerPage != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "itemsPerPage", runtime.ParamLocationQuery, *params.ItemsPerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2SystemsSystemIdNotificationsRequest generates requests for GetV2SystemsSystemIdNotifications
func NewGetV2SystemsSystemIdNotificationsRequest(server string, systemId string, params *GetV2SystemsSystemIdNotificationsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "systemId", runtime.ParamLocationPath, systemId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/systems/%s/notifications", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ItemsPerPage != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "itemsPerPage", runtime.ParamLocationQuery, *params.ItemsPerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params.AcceptLanguage != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Accept-Language", headerParam0)
	}

	return req, nil
}

// NewGetV2SystemsSystemIdNotificationsActiveRequest generates requests for GetV2SystemsSystemIdNotificationsActive
func NewGetV2SystemsSystemIdNotificationsActiveRequest(server string, systemId string, params *GetV2SystemsSystemIdNotificationsActiveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "systemId", runtime.ParamLocationPath, systemId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/systems/%s/notifications/active", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ItemsPerPage != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "itemsPerPage", runtime.ParamLocationQuery, *params.ItemsPerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params.AcceptLanguage != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Accept-Language", headerParam0)
	}

	return req, nil
}

// NewGetV2SystemsSystemIdSmartHomeModeRequest generates requests for GetV2SystemsSystemIdSmartHomeMode
func NewGetV2SystemsSystemIdSmartHomeModeRequest(server string, systemId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "systemId", runtime.ParamLocationPath, systemId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/systems/%s/smart-home-mode", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV2SystemsSystemIdSmartHomeModeRequest calls the generic PutV2SystemsSystemIdSmartHomeMode builder with application/json body
func NewPutV2SystemsSystemIdSmartHomeModeRequest(server string, systemId string, body PutV2SystemsSystemIdSmartHomeModeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV2SystemsSystemIdSmartHomeModeRequestWithBody(server, systemId, "application/json", bodyReader)
}

// NewPutV2SystemsSystemIdSmartHomeModeRequestWithBody generates requests for PutV2SystemsSystemIdSmartHomeMode with any type of body
func NewPutV2SystemsSystemIdSmartHomeModeRequestWithBody(server string, systemId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "systemId", runtime.ParamLocationPath, systemId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/systems/%s/smart-home-mode", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV2SystemsSystemIdSubscriptionsRequest generates requests for GetV2SystemsSystemIdSubscriptions
func NewGetV2SystemsSystemIdSubscriptionsRequest(server string, systemId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "systemId", runtime.ParamLocationPath, systemId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/systems/%s/subscriptions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetWellKnownOpenidConfiguration request
	GetWellKnownOpenidConfigurationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWellKnownOpenidConfigurationResponse, error)

	// GetWellKnownOpenidConfigurationJwks request
	GetWellKnownOpenidConfigurationJwksWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWellKnownOpenidConfigurationJwksResponse, error)

	// GetAssetsIdentityServerAny request
	GetAssetsIdentityServerAnyWithResponse(ctx context.Context, any string, reqEditors ...RequestEditorFn) (*GetAssetsIdentityServerAnyResponse, error)

	// GetConnectAuthorizeCallback request
	GetConnectAuthorizeCallbackWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetConnectAuthorizeCallbackResponse, error)

	// GetOauthAuthorize request
	GetOauthAuthorizeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOauthAuthorizeResponse, error)

	// PostOauthAuthorize request
	PostOauthAuthorizeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostOauthAuthorizeResponse, error)

	// GetOauthConsent request
	GetOauthConsentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOauthConsentResponse, error)

	// PostOauthConsent request
	PostOauthConsentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostOauthConsentResponse, error)

	// GetOauthError request
	GetOauthErrorWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOauthErrorResponse, error)

	// GetOauthLogin request
	GetOauthLoginWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOauthLoginResponse, error)

	// PostOauthLogin request
	PostOauthLoginWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostOauthLoginResponse, error)

	// PostOauthToken request
	PostOauthTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostOauthTokenResponse, error)

	// GetV2DevicesDeviceId request
	GetV2DevicesDeviceIdWithResponse(ctx context.Context, deviceId string, reqEditors ...RequestEditorFn) (*GetV2DevicesDeviceIdResponse, error)

	// GetV2DevicesDeviceIdAidMode request
	GetV2DevicesDeviceIdAidModeWithResponse(ctx context.Context, deviceId string, reqEditors ...RequestEditorFn) (*GetV2DevicesDeviceIdAidModeResponse, error)

	// GetV2DevicesDeviceIdFirmware request
	GetV2DevicesDeviceIdFirmwareWithResponse(ctx context.Context, deviceId string, reqEditors ...RequestEditorFn) (*GetV2DevicesDeviceIdFirmwareResponse, error)

	// GetV2DevicesDeviceIdPoints request
	GetV2DevicesDeviceIdPointsWithResponse(ctx context.Context, deviceId string, params *GetV2DevicesDeviceIdPointsParams, reqEditors ...RequestEditorFn) (*GetV2DevicesDeviceIdPointsResponse, error)

	// PatchV2DevicesDeviceIdPoints request with any body
	PatchV2DevicesDeviceIdPointsWithBodyWithResponse(ctx context.Context, deviceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV2DevicesDeviceIdPointsResponse, error)

	PatchV2DevicesDeviceIdPointsWithResponse(ctx context.Context, deviceId string, body PatchV2DevicesDeviceIdPointsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV2DevicesDeviceIdPointsResponse, error)

	// GetV2DevicesDeviceIdSmartHomeCategories request
	GetV2DevicesDeviceIdSmartHomeCategoriesWithResponse(ctx context.Context, deviceId string, reqEditors ...RequestEditorFn) (*GetV2DevicesDeviceIdSmartHomeCategoriesResponse, error)

	// GetV2DevicesDeviceIdSmartHomeZones request
	GetV2DevicesDeviceIdSmartHomeZonesWithResponse(ctx context.Context, deviceId string, params *GetV2DevicesDeviceIdSmartHomeZonesParams, reqEditors ...RequestEditorFn) (*GetV2DevicesDeviceIdSmartHomeZonesResponse, error)

	// PatchV2DevicesDeviceIdZonesZoneId request with any body
	PatchV2DevicesDeviceIdZonesZoneIdWithBodyWithResponse(ctx context.Context, deviceId string, zoneId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV2DevicesDeviceIdZonesZoneIdResponse, error)

	PatchV2DevicesDeviceIdZonesZoneIdWithResponse(ctx context.Context, deviceId string, zoneId int32, body PatchV2DevicesDeviceIdZonesZoneIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV2DevicesDeviceIdZonesZoneIdResponse, error)

	// GetV2FirmwareFirmwareTypeIdVersionVersionDownload request
	GetV2FirmwareFirmwareTypeIdVersionVersionDownloadWithResponse(ctx context.Context, firmwareTypeId string, version string, reqEditors ...RequestEditorFn) (*GetV2FirmwareFirmwareTypeIdVersionVersionDownloadResponse, error)

	// GetV2ProtectedPing request
	GetV2ProtectedPingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV2ProtectedPingResponse, error)

	// GetV2SystemsMe request
	GetV2SystemsMeWithResponse(ctx context.Context, params *GetV2SystemsMeParams, reqEditors ...RequestEditorFn) (*GetV2SystemsMeResponse, error)

	// GetV2SystemsSystemIdNotifications request
	GetV2SystemsSystemIdNotificationsWithResponse(ctx context.Context, systemId string, params *GetV2SystemsSystemIdNotificationsParams, reqEditors ...RequestEditorFn) (*GetV2SystemsSystemIdNotificationsResponse, error)

	// GetV2SystemsSystemIdNotificationsActive request
	GetV2SystemsSystemIdNotificationsActiveWithResponse(ctx context.Context, systemId string, params *GetV2SystemsSystemIdNotificationsActiveParams, reqEditors ...RequestEditorFn) (*GetV2SystemsSystemIdNotificationsActiveResponse, error)

	// GetV2SystemsSystemIdSmartHomeMode request
	GetV2SystemsSystemIdSmartHomeModeWithResponse(ctx context.Context, systemId string, reqEditors ...RequestEditorFn) (*GetV2SystemsSystemIdSmartHomeModeResponse, error)

	// PutV2SystemsSystemIdSmartHomeMode request with any body
	PutV2SystemsSystemIdSmartHomeModeWithBodyWithResponse(ctx context.Context, systemId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV2SystemsSystemIdSmartHomeModeResponse, error)

	PutV2SystemsSystemIdSmartHomeModeWithResponse(ctx context.Context, systemId string, body PutV2SystemsSystemIdSmartHomeModeJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV2SystemsSystemIdSmartHomeModeResponse, error)

	// GetV2SystemsSystemIdSubscriptions request
	GetV2SystemsSystemIdSubscriptionsWithResponse(ctx context.Context, systemId string, reqEditors ...RequestEditorFn) (*GetV2SystemsSystemIdSubscriptionsResponse, error)
}

type GetWellKnownOpenidConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetWellKnownOpenidConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWellKnownOpenidConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWellKnownOpenidConfigurationJwksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetWellKnownOpenidConfigurationJwksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWellKnownOpenidConfigurationJwksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAssetsIdentityServerAnyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAssetsIdentityServerAnyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAssetsIdentityServerAnyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConnectAuthorizeCallbackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetConnectAuthorizeCallbackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConnectAuthorizeCallbackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOauthAuthorizeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetOauthAuthorizeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOauthAuthorizeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOauthAuthorizeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostOauthAuthorizeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOauthAuthorizeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOauthConsentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetOauthConsentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOauthConsentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOauthConsentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostOauthConsentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOauthConsentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOauthErrorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetOauthErrorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOauthErrorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOauthLoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetOauthLoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOauthLoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOauthLoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostOauthLoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOauthLoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOauthTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostOauthTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOauthTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2DevicesDeviceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeviceResponseModel
}

// Status returns HTTPResponse.Status
func (r GetV2DevicesDeviceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2DevicesDeviceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2DevicesDeviceIdAidModeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AidModeResponseModel
}

// Status returns HTTPResponse.Status
func (r GetV2DevicesDeviceIdAidModeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2DevicesDeviceIdAidModeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2DevicesDeviceIdFirmwareResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FirmwareResponse
}

// Status returns HTTPResponse.Status
func (r GetV2DevicesDeviceIdFirmwareResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2DevicesDeviceIdFirmwareResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2DevicesDeviceIdPointsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ParameterData
}

// Status returns HTTPResponse.Status
func (r GetV2DevicesDeviceIdPointsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2DevicesDeviceIdPointsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV2DevicesDeviceIdPointsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CloudToDeviceMethodResult
}

// Status returns HTTPResponse.Status
func (r PatchV2DevicesDeviceIdPointsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV2DevicesDeviceIdPointsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2DevicesDeviceIdSmartHomeCategoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		ShEnergyMetered            *bool `json:"sh-energyMetered,omitempty"`
		ShHwBoost                  *bool `json:"sh-hwBoost,omitempty"`
		ShHwTemp                   *bool `json:"sh-hwTemp,omitempty"`
		ShIndoorCO2                *bool `json:"sh-indoorCO2,omitempty"`
		ShIndoorHumidity           *bool `json:"sh-indoorHumidity,omitempty"`
		ShIndoorSpCool             *bool `json:"sh-indoorSpCool,omitempty"`
		ShIndoorSpHeat             *bool `json:"sh-indoorSpHeat,omitempty"`
		ShIndoorSpOffsCool         *bool `json:"sh-indoorSpOffsCool,omitempty"`
		ShIndoorSpOffsHeat         *bool `json:"sh-indoorSpOffsHeat,omitempty"`
		ShIndoorTemp               *bool `json:"sh-indoorTemp,omitempty"`
		ShOutdoorTemp              *bool `json:"sh-outdoorTemp,omitempty"`
		ShPoolTemp                 *bool `json:"sh-poolTemp,omitempty"`
		ShReturnTemp               *bool `json:"sh-returnTemp,omitempty"`
		ShSmartMode                *bool `json:"sh-smartMode,omitempty"`
		ShSolarEnergyProducedDay   *bool `json:"sh-solarEnergyProducedDay,omitempty"`
		ShSolarEnergyProducedMonth *bool `json:"sh-solarEnergyProducedMonth,omitempty"`
		ShSolarEnergyProducedTotal *bool `json:"sh-solarEnergyProducedTotal,omitempty"`
		ShSolarEnergyProducedWeek  *bool `json:"sh-solarEnergyProducedWeek,omitempty"`
		ShSolarEnergyProducedYear  *bool `json:"sh-solarEnergyProducedYear,omitempty"`
		ShSupplyTemp               *bool `json:"sh-supplyTemp,omitempty"`
		ShVentBoost                *bool `json:"sh-ventBoost,omitempty"`
		ShVentMode                 *bool `json:"sh-ventMode,omitempty"`
		ShZoneMode                 *bool `json:"sh-zoneMode,omitempty"`
		ShZones                    *bool `json:"sh-zones,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV2DevicesDeviceIdSmartHomeCategoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2DevicesDeviceIdSmartHomeCategoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2DevicesDeviceIdSmartHomeZonesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ZoneResponse
}

// Status returns HTTPResponse.Status
func (r GetV2DevicesDeviceIdSmartHomeZonesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2DevicesDeviceIdSmartHomeZonesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV2DevicesDeviceIdZonesZoneIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]string `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r PatchV2DevicesDeviceIdZonesZoneIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV2DevicesDeviceIdZonesZoneIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2FirmwareFirmwareTypeIdVersionVersionDownloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r GetV2FirmwareFirmwareTypeIdVersionVersionDownloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2FirmwareFirmwareTypeIdVersionVersionDownloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2ProtectedPingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetV2ProtectedPingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2ProtectedPingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2SystemsMeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PagedSystemResult
}

// Status returns HTTPResponse.Status
func (r GetV2SystemsMeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2SystemsMeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2SystemsSystemIdNotificationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AlarmsPaged
}

// Status returns HTTPResponse.Status
func (r GetV2SystemsSystemIdNotificationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2SystemsSystemIdNotificationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2SystemsSystemIdNotificationsActiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AlarmsPaged
}

// Status returns HTTPResponse.Status
func (r GetV2SystemsSystemIdNotificationsActiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2SystemsSystemIdNotificationsActiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2SystemsSystemIdSmartHomeModeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SmartHomeModeModel
}

// Status returns HTTPResponse.Status
func (r GetV2SystemsSystemIdSmartHomeModeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2SystemsSystemIdSmartHomeModeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV2SystemsSystemIdSmartHomeModeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutV2SystemsSystemIdSmartHomeModeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV2SystemsSystemIdSmartHomeModeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2SystemsSystemIdSubscriptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DevicePremiumResponse
}

// Status returns HTTPResponse.Status
func (r GetV2SystemsSystemIdSubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2SystemsSystemIdSubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetWellKnownOpenidConfigurationWithResponse request returning *GetWellKnownOpenidConfigurationResponse
func (c *ClientWithResponses) GetWellKnownOpenidConfigurationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWellKnownOpenidConfigurationResponse, error) {
	rsp, err := c.GetWellKnownOpenidConfiguration(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWellKnownOpenidConfigurationResponse(rsp)
}

// GetWellKnownOpenidConfigurationJwksWithResponse request returning *GetWellKnownOpenidConfigurationJwksResponse
func (c *ClientWithResponses) GetWellKnownOpenidConfigurationJwksWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWellKnownOpenidConfigurationJwksResponse, error) {
	rsp, err := c.GetWellKnownOpenidConfigurationJwks(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWellKnownOpenidConfigurationJwksResponse(rsp)
}

// GetAssetsIdentityServerAnyWithResponse request returning *GetAssetsIdentityServerAnyResponse
func (c *ClientWithResponses) GetAssetsIdentityServerAnyWithResponse(ctx context.Context, any string, reqEditors ...RequestEditorFn) (*GetAssetsIdentityServerAnyResponse, error) {
	rsp, err := c.GetAssetsIdentityServerAny(ctx, any, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAssetsIdentityServerAnyResponse(rsp)
}

// GetConnectAuthorizeCallbackWithResponse request returning *GetConnectAuthorizeCallbackResponse
func (c *ClientWithResponses) GetConnectAuthorizeCallbackWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetConnectAuthorizeCallbackResponse, error) {
	rsp, err := c.GetConnectAuthorizeCallback(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConnectAuthorizeCallbackResponse(rsp)
}

// GetOauthAuthorizeWithResponse request returning *GetOauthAuthorizeResponse
func (c *ClientWithResponses) GetOauthAuthorizeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOauthAuthorizeResponse, error) {
	rsp, err := c.GetOauthAuthorize(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOauthAuthorizeResponse(rsp)
}

// PostOauthAuthorizeWithResponse request returning *PostOauthAuthorizeResponse
func (c *ClientWithResponses) PostOauthAuthorizeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostOauthAuthorizeResponse, error) {
	rsp, err := c.PostOauthAuthorize(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOauthAuthorizeResponse(rsp)
}

// GetOauthConsentWithResponse request returning *GetOauthConsentResponse
func (c *ClientWithResponses) GetOauthConsentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOauthConsentResponse, error) {
	rsp, err := c.GetOauthConsent(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOauthConsentResponse(rsp)
}

// PostOauthConsentWithResponse request returning *PostOauthConsentResponse
func (c *ClientWithResponses) PostOauthConsentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostOauthConsentResponse, error) {
	rsp, err := c.PostOauthConsent(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOauthConsentResponse(rsp)
}

// GetOauthErrorWithResponse request returning *GetOauthErrorResponse
func (c *ClientWithResponses) GetOauthErrorWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOauthErrorResponse, error) {
	rsp, err := c.GetOauthError(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOauthErrorResponse(rsp)
}

// GetOauthLoginWithResponse request returning *GetOauthLoginResponse
func (c *ClientWithResponses) GetOauthLoginWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOauthLoginResponse, error) {
	rsp, err := c.GetOauthLogin(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOauthLoginResponse(rsp)
}

// PostOauthLoginWithResponse request returning *PostOauthLoginResponse
func (c *ClientWithResponses) PostOauthLoginWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostOauthLoginResponse, error) {
	rsp, err := c.PostOauthLogin(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOauthLoginResponse(rsp)
}

// PostOauthTokenWithResponse request returning *PostOauthTokenResponse
func (c *ClientWithResponses) PostOauthTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostOauthTokenResponse, error) {
	rsp, err := c.PostOauthToken(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOauthTokenResponse(rsp)
}

// GetV2DevicesDeviceIdWithResponse request returning *GetV2DevicesDeviceIdResponse
func (c *ClientWithResponses) GetV2DevicesDeviceIdWithResponse(ctx context.Context, deviceId string, reqEditors ...RequestEditorFn) (*GetV2DevicesDeviceIdResponse, error) {
	rsp, err := c.GetV2DevicesDeviceId(ctx, deviceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2DevicesDeviceIdResponse(rsp)
}

// GetV2DevicesDeviceIdAidModeWithResponse request returning *GetV2DevicesDeviceIdAidModeResponse
func (c *ClientWithResponses) GetV2DevicesDeviceIdAidModeWithResponse(ctx context.Context, deviceId string, reqEditors ...RequestEditorFn) (*GetV2DevicesDeviceIdAidModeResponse, error) {
	rsp, err := c.GetV2DevicesDeviceIdAidMode(ctx, deviceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2DevicesDeviceIdAidModeResponse(rsp)
}

// GetV2DevicesDeviceIdFirmwareWithResponse request returning *GetV2DevicesDeviceIdFirmwareResponse
func (c *ClientWithResponses) GetV2DevicesDeviceIdFirmwareWithResponse(ctx context.Context, deviceId string, reqEditors ...RequestEditorFn) (*GetV2DevicesDeviceIdFirmwareResponse, error) {
	rsp, err := c.GetV2DevicesDeviceIdFirmware(ctx, deviceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2DevicesDeviceIdFirmwareResponse(rsp)
}

// GetV2DevicesDeviceIdPointsWithResponse request returning *GetV2DevicesDeviceIdPointsResponse
func (c *ClientWithResponses) GetV2DevicesDeviceIdPointsWithResponse(ctx context.Context, deviceId string, params *GetV2DevicesDeviceIdPointsParams, reqEditors ...RequestEditorFn) (*GetV2DevicesDeviceIdPointsResponse, error) {
	rsp, err := c.GetV2DevicesDeviceIdPoints(ctx, deviceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2DevicesDeviceIdPointsResponse(rsp)
}

// PatchV2DevicesDeviceIdPointsWithBodyWithResponse request with arbitrary body returning *PatchV2DevicesDeviceIdPointsResponse
func (c *ClientWithResponses) PatchV2DevicesDeviceIdPointsWithBodyWithResponse(ctx context.Context, deviceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV2DevicesDeviceIdPointsResponse, error) {
	rsp, err := c.PatchV2DevicesDeviceIdPointsWithBody(ctx, deviceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV2DevicesDeviceIdPointsResponse(rsp)
}

func (c *ClientWithResponses) PatchV2DevicesDeviceIdPointsWithResponse(ctx context.Context, deviceId string, body PatchV2DevicesDeviceIdPointsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV2DevicesDeviceIdPointsResponse, error) {
	rsp, err := c.PatchV2DevicesDeviceIdPoints(ctx, deviceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV2DevicesDeviceIdPointsResponse(rsp)
}

// GetV2DevicesDeviceIdSmartHomeCategoriesWithResponse request returning *GetV2DevicesDeviceIdSmartHomeCategoriesResponse
func (c *ClientWithResponses) GetV2DevicesDeviceIdSmartHomeCategoriesWithResponse(ctx context.Context, deviceId string, reqEditors ...RequestEditorFn) (*GetV2DevicesDeviceIdSmartHomeCategoriesResponse, error) {
	rsp, err := c.GetV2DevicesDeviceIdSmartHomeCategories(ctx, deviceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2DevicesDeviceIdSmartHomeCategoriesResponse(rsp)
}

// GetV2DevicesDeviceIdSmartHomeZonesWithResponse request returning *GetV2DevicesDeviceIdSmartHomeZonesResponse
func (c *ClientWithResponses) GetV2DevicesDeviceIdSmartHomeZonesWithResponse(ctx context.Context, deviceId string, params *GetV2DevicesDeviceIdSmartHomeZonesParams, reqEditors ...RequestEditorFn) (*GetV2DevicesDeviceIdSmartHomeZonesResponse, error) {
	rsp, err := c.GetV2DevicesDeviceIdSmartHomeZones(ctx, deviceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2DevicesDeviceIdSmartHomeZonesResponse(rsp)
}

// PatchV2DevicesDeviceIdZonesZoneIdWithBodyWithResponse request with arbitrary body returning *PatchV2DevicesDeviceIdZonesZoneIdResponse
func (c *ClientWithResponses) PatchV2DevicesDeviceIdZonesZoneIdWithBodyWithResponse(ctx context.Context, deviceId string, zoneId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV2DevicesDeviceIdZonesZoneIdResponse, error) {
	rsp, err := c.PatchV2DevicesDeviceIdZonesZoneIdWithBody(ctx, deviceId, zoneId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV2DevicesDeviceIdZonesZoneIdResponse(rsp)
}

func (c *ClientWithResponses) PatchV2DevicesDeviceIdZonesZoneIdWithResponse(ctx context.Context, deviceId string, zoneId int32, body PatchV2DevicesDeviceIdZonesZoneIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV2DevicesDeviceIdZonesZoneIdResponse, error) {
	rsp, err := c.PatchV2DevicesDeviceIdZonesZoneId(ctx, deviceId, zoneId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV2DevicesDeviceIdZonesZoneIdResponse(rsp)
}

// GetV2FirmwareFirmwareTypeIdVersionVersionDownloadWithResponse request returning *GetV2FirmwareFirmwareTypeIdVersionVersionDownloadResponse
func (c *ClientWithResponses) GetV2FirmwareFirmwareTypeIdVersionVersionDownloadWithResponse(ctx context.Context, firmwareTypeId string, version string, reqEditors ...RequestEditorFn) (*GetV2FirmwareFirmwareTypeIdVersionVersionDownloadResponse, error) {
	rsp, err := c.GetV2FirmwareFirmwareTypeIdVersionVersionDownload(ctx, firmwareTypeId, version, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2FirmwareFirmwareTypeIdVersionVersionDownloadResponse(rsp)
}

// GetV2ProtectedPingWithResponse request returning *GetV2ProtectedPingResponse
func (c *ClientWithResponses) GetV2ProtectedPingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV2ProtectedPingResponse, error) {
	rsp, err := c.GetV2ProtectedPing(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2ProtectedPingResponse(rsp)
}

// GetV2SystemsMeWithResponse request returning *GetV2SystemsMeResponse
func (c *ClientWithResponses) GetV2SystemsMeWithResponse(ctx context.Context, params *GetV2SystemsMeParams, reqEditors ...RequestEditorFn) (*GetV2SystemsMeResponse, error) {
	rsp, err := c.GetV2SystemsMe(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2SystemsMeResponse(rsp)
}

// GetV2SystemsSystemIdNotificationsWithResponse request returning *GetV2SystemsSystemIdNotificationsResponse
func (c *ClientWithResponses) GetV2SystemsSystemIdNotificationsWithResponse(ctx context.Context, systemId string, params *GetV2SystemsSystemIdNotificationsParams, reqEditors ...RequestEditorFn) (*GetV2SystemsSystemIdNotificationsResponse, error) {
	rsp, err := c.GetV2SystemsSystemIdNotifications(ctx, systemId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2SystemsSystemIdNotificationsResponse(rsp)
}

// GetV2SystemsSystemIdNotificationsActiveWithResponse request returning *GetV2SystemsSystemIdNotificationsActiveResponse
func (c *ClientWithResponses) GetV2SystemsSystemIdNotificationsActiveWithResponse(ctx context.Context, systemId string, params *GetV2SystemsSystemIdNotificationsActiveParams, reqEditors ...RequestEditorFn) (*GetV2SystemsSystemIdNotificationsActiveResponse, error) {
	rsp, err := c.GetV2SystemsSystemIdNotificationsActive(ctx, systemId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2SystemsSystemIdNotificationsActiveResponse(rsp)
}

// GetV2SystemsSystemIdSmartHomeModeWithResponse request returning *GetV2SystemsSystemIdSmartHomeModeResponse
func (c *ClientWithResponses) GetV2SystemsSystemIdSmartHomeModeWithResponse(ctx context.Context, systemId string, reqEditors ...RequestEditorFn) (*GetV2SystemsSystemIdSmartHomeModeResponse, error) {
	rsp, err := c.GetV2SystemsSystemIdSmartHomeMode(ctx, systemId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2SystemsSystemIdSmartHomeModeResponse(rsp)
}

// PutV2SystemsSystemIdSmartHomeModeWithBodyWithResponse request with arbitrary body returning *PutV2SystemsSystemIdSmartHomeModeResponse
func (c *ClientWithResponses) PutV2SystemsSystemIdSmartHomeModeWithBodyWithResponse(ctx context.Context, systemId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV2SystemsSystemIdSmartHomeModeResponse, error) {
	rsp, err := c.PutV2SystemsSystemIdSmartHomeModeWithBody(ctx, systemId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV2SystemsSystemIdSmartHomeModeResponse(rsp)
}

func (c *ClientWithResponses) PutV2SystemsSystemIdSmartHomeModeWithResponse(ctx context.Context, systemId string, body PutV2SystemsSystemIdSmartHomeModeJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV2SystemsSystemIdSmartHomeModeResponse, error) {
	rsp, err := c.PutV2SystemsSystemIdSmartHomeMode(ctx, systemId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV2SystemsSystemIdSmartHomeModeResponse(rsp)
}

// GetV2SystemsSystemIdSubscriptionsWithResponse request returning *GetV2SystemsSystemIdSubscriptionsResponse
func (c *ClientWithResponses) GetV2SystemsSystemIdSubscriptionsWithResponse(ctx context.Context, systemId string, reqEditors ...RequestEditorFn) (*GetV2SystemsSystemIdSubscriptionsResponse, error) {
	rsp, err := c.GetV2SystemsSystemIdSubscriptions(ctx, systemId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2SystemsSystemIdSubscriptionsResponse(rsp)
}

// ParseGetWellKnownOpenidConfigurationResponse parses an HTTP response from a GetWellKnownOpenidConfigurationWithResponse call
func ParseGetWellKnownOpenidConfigurationResponse(rsp *http.Response) (*GetWellKnownOpenidConfigurationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWellKnownOpenidConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetWellKnownOpenidConfigurationJwksResponse parses an HTTP response from a GetWellKnownOpenidConfigurationJwksWithResponse call
func ParseGetWellKnownOpenidConfigurationJwksResponse(rsp *http.Response) (*GetWellKnownOpenidConfigurationJwksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWellKnownOpenidConfigurationJwksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAssetsIdentityServerAnyResponse parses an HTTP response from a GetAssetsIdentityServerAnyWithResponse call
func ParseGetAssetsIdentityServerAnyResponse(rsp *http.Response) (*GetAssetsIdentityServerAnyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAssetsIdentityServerAnyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetConnectAuthorizeCallbackResponse parses an HTTP response from a GetConnectAuthorizeCallbackWithResponse call
func ParseGetConnectAuthorizeCallbackResponse(rsp *http.Response) (*GetConnectAuthorizeCallbackResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConnectAuthorizeCallbackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetOauthAuthorizeResponse parses an HTTP response from a GetOauthAuthorizeWithResponse call
func ParseGetOauthAuthorizeResponse(rsp *http.Response) (*GetOauthAuthorizeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOauthAuthorizeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostOauthAuthorizeResponse parses an HTTP response from a PostOauthAuthorizeWithResponse call
func ParsePostOauthAuthorizeResponse(rsp *http.Response) (*PostOauthAuthorizeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOauthAuthorizeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetOauthConsentResponse parses an HTTP response from a GetOauthConsentWithResponse call
func ParseGetOauthConsentResponse(rsp *http.Response) (*GetOauthConsentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOauthConsentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostOauthConsentResponse parses an HTTP response from a PostOauthConsentWithResponse call
func ParsePostOauthConsentResponse(rsp *http.Response) (*PostOauthConsentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOauthConsentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetOauthErrorResponse parses an HTTP response from a GetOauthErrorWithResponse call
func ParseGetOauthErrorResponse(rsp *http.Response) (*GetOauthErrorResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOauthErrorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetOauthLoginResponse parses an HTTP response from a GetOauthLoginWithResponse call
func ParseGetOauthLoginResponse(rsp *http.Response) (*GetOauthLoginResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOauthLoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostOauthLoginResponse parses an HTTP response from a PostOauthLoginWithResponse call
func ParsePostOauthLoginResponse(rsp *http.Response) (*PostOauthLoginResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOauthLoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostOauthTokenResponse parses an HTTP response from a PostOauthTokenWithResponse call
func ParsePostOauthTokenResponse(rsp *http.Response) (*PostOauthTokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOauthTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV2DevicesDeviceIdResponse parses an HTTP response from a GetV2DevicesDeviceIdWithResponse call
func ParseGetV2DevicesDeviceIdResponse(rsp *http.Response) (*GetV2DevicesDeviceIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2DevicesDeviceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetV2DevicesDeviceIdAidModeResponse parses an HTTP response from a GetV2DevicesDeviceIdAidModeWithResponse call
func ParseGetV2DevicesDeviceIdAidModeResponse(rsp *http.Response) (*GetV2DevicesDeviceIdAidModeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2DevicesDeviceIdAidModeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AidModeResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetV2DevicesDeviceIdFirmwareResponse parses an HTTP response from a GetV2DevicesDeviceIdFirmwareWithResponse call
func ParseGetV2DevicesDeviceIdFirmwareResponse(rsp *http.Response) (*GetV2DevicesDeviceIdFirmwareResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2DevicesDeviceIdFirmwareResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FirmwareResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetV2DevicesDeviceIdPointsResponse parses an HTTP response from a GetV2DevicesDeviceIdPointsWithResponse call
func ParseGetV2DevicesDeviceIdPointsResponse(rsp *http.Response) (*GetV2DevicesDeviceIdPointsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2DevicesDeviceIdPointsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ParameterData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePatchV2DevicesDeviceIdPointsResponse parses an HTTP response from a PatchV2DevicesDeviceIdPointsWithResponse call
func ParsePatchV2DevicesDeviceIdPointsResponse(rsp *http.Response) (*PatchV2DevicesDeviceIdPointsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV2DevicesDeviceIdPointsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CloudToDeviceMethodResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetV2DevicesDeviceIdSmartHomeCategoriesResponse parses an HTTP response from a GetV2DevicesDeviceIdSmartHomeCategoriesWithResponse call
func ParseGetV2DevicesDeviceIdSmartHomeCategoriesResponse(rsp *http.Response) (*GetV2DevicesDeviceIdSmartHomeCategoriesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2DevicesDeviceIdSmartHomeCategoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			ShEnergyMetered            *bool `json:"sh-energyMetered,omitempty"`
			ShHwBoost                  *bool `json:"sh-hwBoost,omitempty"`
			ShHwTemp                   *bool `json:"sh-hwTemp,omitempty"`
			ShIndoorCO2                *bool `json:"sh-indoorCO2,omitempty"`
			ShIndoorHumidity           *bool `json:"sh-indoorHumidity,omitempty"`
			ShIndoorSpCool             *bool `json:"sh-indoorSpCool,omitempty"`
			ShIndoorSpHeat             *bool `json:"sh-indoorSpHeat,omitempty"`
			ShIndoorSpOffsCool         *bool `json:"sh-indoorSpOffsCool,omitempty"`
			ShIndoorSpOffsHeat         *bool `json:"sh-indoorSpOffsHeat,omitempty"`
			ShIndoorTemp               *bool `json:"sh-indoorTemp,omitempty"`
			ShOutdoorTemp              *bool `json:"sh-outdoorTemp,omitempty"`
			ShPoolTemp                 *bool `json:"sh-poolTemp,omitempty"`
			ShReturnTemp               *bool `json:"sh-returnTemp,omitempty"`
			ShSmartMode                *bool `json:"sh-smartMode,omitempty"`
			ShSolarEnergyProducedDay   *bool `json:"sh-solarEnergyProducedDay,omitempty"`
			ShSolarEnergyProducedMonth *bool `json:"sh-solarEnergyProducedMonth,omitempty"`
			ShSolarEnergyProducedTotal *bool `json:"sh-solarEnergyProducedTotal,omitempty"`
			ShSolarEnergyProducedWeek  *bool `json:"sh-solarEnergyProducedWeek,omitempty"`
			ShSolarEnergyProducedYear  *bool `json:"sh-solarEnergyProducedYear,omitempty"`
			ShSupplyTemp               *bool `json:"sh-supplyTemp,omitempty"`
			ShVentBoost                *bool `json:"sh-ventBoost,omitempty"`
			ShVentMode                 *bool `json:"sh-ventMode,omitempty"`
			ShZoneMode                 *bool `json:"sh-zoneMode,omitempty"`
			ShZones                    *bool `json:"sh-zones,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetV2DevicesDeviceIdSmartHomeZonesResponse parses an HTTP response from a GetV2DevicesDeviceIdSmartHomeZonesWithResponse call
func ParseGetV2DevicesDeviceIdSmartHomeZonesResponse(rsp *http.Response) (*GetV2DevicesDeviceIdSmartHomeZonesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2DevicesDeviceIdSmartHomeZonesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ZoneResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePatchV2DevicesDeviceIdZonesZoneIdResponse parses an HTTP response from a PatchV2DevicesDeviceIdZonesZoneIdWithResponse call
func ParsePatchV2DevicesDeviceIdZonesZoneIdResponse(rsp *http.Response) (*PatchV2DevicesDeviceIdZonesZoneIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV2DevicesDeviceIdZonesZoneIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]string `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetV2FirmwareFirmwareTypeIdVersionVersionDownloadResponse parses an HTTP response from a GetV2FirmwareFirmwareTypeIdVersionVersionDownloadWithResponse call
func ParseGetV2FirmwareFirmwareTypeIdVersionVersionDownloadResponse(rsp *http.Response) (*GetV2FirmwareFirmwareTypeIdVersionVersionDownloadResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2FirmwareFirmwareTypeIdVersionVersionDownloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetV2ProtectedPingResponse parses an HTTP response from a GetV2ProtectedPingWithResponse call
func ParseGetV2ProtectedPingResponse(rsp *http.Response) (*GetV2ProtectedPingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2ProtectedPingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV2SystemsMeResponse parses an HTTP response from a GetV2SystemsMeWithResponse call
func ParseGetV2SystemsMeResponse(rsp *http.Response) (*GetV2SystemsMeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2SystemsMeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PagedSystemResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetV2SystemsSystemIdNotificationsResponse parses an HTTP response from a GetV2SystemsSystemIdNotificationsWithResponse call
func ParseGetV2SystemsSystemIdNotificationsResponse(rsp *http.Response) (*GetV2SystemsSystemIdNotificationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2SystemsSystemIdNotificationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlarmsPaged
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetV2SystemsSystemIdNotificationsActiveResponse parses an HTTP response from a GetV2SystemsSystemIdNotificationsActiveWithResponse call
func ParseGetV2SystemsSystemIdNotificationsActiveResponse(rsp *http.Response) (*GetV2SystemsSystemIdNotificationsActiveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2SystemsSystemIdNotificationsActiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlarmsPaged
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetV2SystemsSystemIdSmartHomeModeResponse parses an HTTP response from a GetV2SystemsSystemIdSmartHomeModeWithResponse call
func ParseGetV2SystemsSystemIdSmartHomeModeResponse(rsp *http.Response) (*GetV2SystemsSystemIdSmartHomeModeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2SystemsSystemIdSmartHomeModeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SmartHomeModeModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutV2SystemsSystemIdSmartHomeModeResponse parses an HTTP response from a PutV2SystemsSystemIdSmartHomeModeWithResponse call
func ParsePutV2SystemsSystemIdSmartHomeModeResponse(rsp *http.Response) (*PutV2SystemsSystemIdSmartHomeModeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV2SystemsSystemIdSmartHomeModeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV2SystemsSystemIdSubscriptionsResponse parses an HTTP response from a GetV2SystemsSystemIdSubscriptionsWithResponse call
func ParseGetV2SystemsSystemIdSubscriptionsResponse(rsp *http.Response) (*GetV2SystemsSystemIdSubscriptionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2SystemsSystemIdSubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DevicePremiumResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}
